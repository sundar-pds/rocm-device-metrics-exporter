# holds all the compilation targets from source

#compiles the library code from source on respective OS platforms
.PHONY: amdsmi-compile
amdsmi-compile:
ifeq ($(OS), RHEL9)
	$(eval BUILD_IMAGE_OS=$(AMDSMI_BUILDER_IMAGE))
else ifeq ($(OS), UBUNTU22)
	$(eval BUILD_IMAGE_OS=$(AMDSMI_BUILDER_UB22_IMAGE))
else ifeq ($(OS), UBUNTU24)
	$(eval BUILD_IMAGE_OS=$(AMDSMI_BUILDER_UB24_IMAGE))
else ifeq ($(OS), AZURE3)
	$(eval BUILD_IMAGE_OS=$(AMDSMI_BUILDER_AZURE_IMAGE))
else
	$(error unsupported os)
endif
	@echo "Building amdsmi library for $(BUILD_IMAGE_OS)"
	@docker run --rm -it --privileged \
		--network host \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		-e "BRANCH=$(AMDSMI_BRANCH)" \
		-e "COMMIT=$(AMDSMI_COMMIT)" \
	    --name smibuild -v $(AMDMSMI_SRC_DIR):$(SMILIB_CONTAINER_WORKDIR) \
		-w $(SMILIB_CONTAINER_WORKDIR) $(BUILD_IMAGE_OS)
	@echo 'Copying amdsmi assets to ${TOP_DIR}/build/assets/${OS}'
	@rm -rf  ${TOP_DIR}/build/assets/${OS} || true
	@mkdir -p ${TOP_DIR}/build/assets/${OS}/
	@cp -rvf ${TOP_DIR}/libamdsmi/build/exporterout ${TOP_DIR}/build/assets/${OS}/
	@echo "updating prebuilt assets amd_smi_lib directory"
	@rm -rf ${TOP_DIR}/assets/amd_smi_lib/x86_64/${OS}
	@mkdir -p ${TOP_DIR}/assets/amd_smi_lib/x86_64/${OS}
	@cp -ravf ${TOP_DIR}/build/assets/${OS}/exporterout ${TOP_DIR}/assets/amd_smi_lib/x86_64/${OS}/lib

.PHONY: amdsmi-compile-rhel
amdsmi-compile-rhel:
	${MAKE} amdsmi-build-rhel
	OS=RHEL9 ${MAKE} amdsmi-compile

.PHONY: amdsmi-compile-ub22
amdsmi-compile-ub22:
	${MAKE} amdsmi-build-ub22
	OS=UBUNTU22 ${MAKE} amdsmi-compile

.PHONY: amdsmi-compile-ub24
amdsmi-compile-ub24:
	${MAKE} amdsmi-build-ub24
	OS=UBUNTU24 ${MAKE} amdsmi-compile

.PHONY: amdsmi-compile-azure
amdsmi-compile-azure:
	${MAKE} amdsmi-build-azure
	OS=AZURE3 ${MAKE} amdsmi-compile

# compiles the gpuagent from source
# gpuagent is a static go binary which is agnostic of platform, so we can
# build it once with any of the prebuilt libamdsmi library file we support
# RHEL9 being default. workspace built binary is being used if exists else revert to
# prebuilt one from repo
.PHONY: gpuagent-compile
gpuagent-compile:
	@docker run --rm -it --privileged \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		--name gpuagentbuild -v $(GPUAGENT_SRC_DIR):$(GPUAGENT_CONTAINER_WORKDIR) \
		-w $(GPUAGENT_CONTAINER_WORKDIR) $(GPUAGENT_BUILDER_IMAGE)
	@cd $(TOP_DIR)/gpuagent && git checkout sw/nic/third-party/rocm/amd_smi_lib

.PHONY: gpuagent-compile-full
gpuagent-compile-full: 
	TOP_DIR=$(TOP_DIR) OS=RHEL9 $(ASSET_COPY_SCRIPT) || true
	${MAKE} gpuagent-compile
	@if [ $$? -ne 0 ]; then \
		echo "gpuagent-compile failed"; \
		exit 1; \
	else \
		echo "Copying gpuagent to assets"; \
		mkdir -p ${TOP_DIR}/build/assets/ || true; \\
		cp -vf $(GPUAGENT_OUT_DIR)/gpuagent $(TOP_DIR)/build/assets/gpuagent; \
		echo "file copied successfully to $(TOP_DIR)/build/assets/gpuagent"; \
	fi

.PHONY: rocprofiler-compile
rocprofiler-compile:
	${MAKE} rocprofiler-build
	@docker run --rm -it --privileged \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		-e "ROCM_VERSION=$(ROCM_VERSION)" \
		--name rocprofilerbuild -v $(ROCPROFILER_SRC_DIR):$(ROCPROFILER_CONTAINER_WORKDIR) \
		-w $(ROCPROFILER_CONTAINER_WORKDIR) $(ROCPROFILER_BUILDER_IMAGE)
	@echo "Copy newly built assets"
	@cp -vf $(ROCPROFILER_ASSET_BLD_DIR)/librocpclient.so $(ROCPROFILER_ASSET_DIR)/
	@cp -vf $(ROCPROFILER_ASSET_BLD_DIR)/rocpctl $(ROCPROFILER_ASSET_DIR)/

LIBBUILDER_DIR := $(TOP_DIR)/tools/rocprofiler-libbuilder/
.PHONY: libcopy-assets
libcopy-assets:
ifeq ($(OS), UBUNTU22)
	$(eval BUILDER_IMAGE="proflib-ub22")
	$(eval BASE_IMAGE=${AMDSMI_BASE_UBUNTU22})
	$(eval DOCKERFILE=$(LIBBUILDER_DIR)/Dockerfile.ubuntu22)
else ifeq ($(OS), UBUNTU24)
	$(eval BUILDER_IMAGE="proflib-ub24")
	$(eval BASE_IMAGE=${AMDSMI_BASE_UBUNTU24})
	$(eval DOCKERFILE=$(LIBBUILDER_DIR)/Dockerfile.ubuntu24)
else ifeq ($(OS), RHEL9)
	$(eval BUILDER_IMAGE="proflib-rhel9")
	$(eval BASE_IMAGE=${AMDSMI_BUILDER_IMAGE})
	$(eval DOCKERFILE=$(LIBBUILDER_DIR)/Dockerfile.rhel9)
else
	$(error unsupported os)
endif
	@echo "Building profiler library builder $(OS), $(DOCKERFILE), $(BUILDER_IMAGE), $(BASE_IMAGE)"
	@echo "Building profiler dependency libraries for $(BUILD_IMAGE_OS)"

	@docker image rm $(BUILDER_IMAGE) || true
	@docker build --build-arg BUILD_BASE_IMAGE=${BASE_IMAGE} \
		--build-arg ROCM_VERSION=${ROCM_VERSION} \
		--build-arg AMDGPU_VERSION=${ROCM_VERSION} \
		-t $(BUILDER_IMAGE) . -f $(DOCKERFILE)
	@docker run --rm -it --privileged \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		-e "BRANCH=$(AMDSMI_BRANCH)" \
		-e "COMMIT=$(AMDSMI_COMMIT)" \
	    --name libdebbuild -v $(TOP_DIR):$(WORK_DIR) \
		-w $(WORK_DIR) $(BUILDER_IMAGE)
	@echo 'Copying profiler lib assets to ${TOP_DIR}/build/assets/${OS}/profilerlibs/'
	@rm -rf  ${TOP_DIR}/build/assets/${OS}/profilerlibs/ || true
	@mkdir -p ${TOP_DIR}/build/assets/${OS}/profilerlibs/
	@cp -rvf ${TOP_DIR}/build/rocprofilerdeplib/ ${TOP_DIR}/build/assets/${OS}/profilerlibs/

.PHONY: libcopy-assets-UBUNTU22
libcopy-assets-UBUNTU22:
	OS=UBUNTU22 ${MAKE} libcopy-assets

.PHONY: libcopy-assets-UBUNTU24
libcopy-assets-UBUNTU24:
	OS=UBUNTU24 ${MAKE} libcopy-assets

.PHONY: libcopy-assets-RHEL
libcopy-assets-RHEL9:
	OS=RHEL9 ${MAKE} libcopy-assets

.PHONY: profiler-libdependent-assets
profiler-libdependent-assets:
	${MAKE} libcopy-assets-UBUNTU22
	${MAKE} libcopy-assets-UBUNTU24
	${MAKE} libcopy-assets-RHEL9

#compiles the library code from source on respective OS platforms
.PHONY: gimsmi-compile
gimsmi-compile:
ifeq ($(OS), RHEL9)
	$(eval BUILD_IMAGE_OS=$(GIMSMI_BUILDER_IMAGE))
else ifeq ($(OS), UBUNTU22)
	$(eval BUILD_IMAGE_OS=$(GIMSMI_BUILDER_UB22_IMAGE))
else ifeq ($(OS), UBUNTU24)
	$(eval BUILD_IMAGE_OS=$(GIMSMI_BUILDER_UB24_IMAGE))
else
	$(error unsupported os)
endif
	@echo "Building gimsmi library for $(BUILD_IMAGE_OS)"
	@docker run --rm -it --privileged \
		--network host \
		-e "USER_NAME=$(shell whoami)" \
		-e "USER_UID=$(shell id -u)" \
		-e "USER_GID=$(shell id -g)" \
		-e "BRANCH=$(GIMSMI_BRANCH)" \
		-e "COMMIT=$(GIMSMI_COMMIT)" \
	    --name gimbuild -v $(AMDMSMI_SRC_DIR):$(SMILIB_CONTAINER_WORKDIR) \
		-w $(SMILIB_CONTAINER_WORKDIR) $(BUILD_IMAGE_OS)
	@echo 'Copying gimsmi assets to ${TOP_DIR}/build/assets/${OS}'
	@rm -rf  ${TOP_DIR}/build/assets/${OS} || true
	@mkdir -p ${TOP_DIR}/build/assets/${OS}/
	@cp -rvf ${TOP_DIR}/libgimsmi/build/exporterout ${TOP_DIR}/build/assets/${OS}/
	@echo "updating prebuilt assets gim_smi_lib directory"
	@rm -rf ${TOP_DIR}/assets/gim_smi_lib/x86_64/${OS}
	@mkdir -p ${TOP_DIR}/assets/gim_smi_lib/x86_64/${OS}
	@cp -ravf ${TOP_DIR}/build/assets/${OS}/exporterout ${TOP_DIR}/assets/gim_smi_lib/x86_64/${OS}/lib

.PHONY: gimsmi-compile-rhel
gimsmi-compile-rhel:
	${MAKE} gimsmi-build-rhel
	OS=RHEL9 ${MAKE} gimsmi-compile

.PHONY: gimsmi-compile-ub22
gimsmi-compile-ub22:
	${MAKE} gimsmi-build-ub22
	OS=UBUNTU22 ${MAKE} gimsmi-compile

.PHONY: gimsmi-compile-ub24
gimsmi-compile-ub24:
	${MAKE} gimsmi-build-ub24
	OS=UBUNTU24 ${MAKE} gimsmi-compile
