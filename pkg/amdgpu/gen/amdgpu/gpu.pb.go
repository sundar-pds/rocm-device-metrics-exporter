//
// Copyright(C) Advanced Micro Devices, Inc. All rights reserved.
//
// You may not use this software and documentation (if any) (collectively,
// the "Materials") except in compliance with the terms and conditions of
// the Software License Agreement included with the Materials or otherwise as
// set forth in writing and signed by you and an authorized signatory of AMD.
// If you do not have a copy of the Software License Agreement, contact your
// AMD representative for a copy.
//
// You agree that you will not reverse engineer or decompile the Materials,
// in whole or in part, except as allowed by applicable law.
//
// THE MATERIALS ARE DISTRIBUTED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
// REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.
//
//----------------------------------------------------------------------------
///
/// \file
/// GPU object protobuf APIs
///
//----------------------------------------------------------------------------

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.12.4
// source: gpu.proto

package amdgpu

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// admin state of GPU
type GPUAdminState int32

const (
	// invalid admin state
	GPUAdminState_GPU_ADMIN_STATE_NONE GPUAdminState = 0
	// GPU is administratively up
	GPUAdminState_GPU_ADMIN_STATE_UP GPUAdminState = 1
	// GPU is administratively down
	GPUAdminState_GPU_ADMIN_STATE_DOWN GPUAdminState = 2
)

// Enum value maps for GPUAdminState.
var (
	GPUAdminState_name = map[int32]string{
		0: "GPU_ADMIN_STATE_NONE",
		1: "GPU_ADMIN_STATE_UP",
		2: "GPU_ADMIN_STATE_DOWN",
	}
	GPUAdminState_value = map[string]int32{
		"GPU_ADMIN_STATE_NONE": 0,
		"GPU_ADMIN_STATE_UP":   1,
		"GPU_ADMIN_STATE_DOWN": 2,
	}
)

func (x GPUAdminState) Enum() *GPUAdminState {
	p := new(GPUAdminState)
	*p = x
	return p
}

func (x GPUAdminState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUAdminState) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[0].Descriptor()
}

func (GPUAdminState) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[0]
}

func (x GPUAdminState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUAdminState.Descriptor instead.
func (GPUAdminState) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{0}
}

// GPU clock types
type GPUClockType int32

const (
	// invalid clock type
	GPUClockType_GPU_CLOCK_TYPE_NONE GPUClockType = 0
	// fabric clock (aka. fclk)
	GPUClockType_GPU_CLOCK_TYPE_FABRIC GPUClockType = 1
	// memory clock (aka. mclk)
	GPUClockType_GPU_CLOCK_TYPE_MEMORY GPUClockType = 2
	// system clock (aka. sclk)
	GPUClockType_GPU_CLOCK_TYPE_SYSTEM GPUClockType = 3
	// SoC clock (aka. socclk)
	GPUClockType_GPU_CLOCK_TYPE_SOC GPUClockType = 4
	// Display Controller Engine (DCE) clock
	GPUClockType_GPU_CLOCK_TYPE_DCE GPUClockType = 5
	// PCIe clock
	GPUClockType_GPU_CLOCK_TYPE_PCIE GPUClockType = 6
	// video clock
	GPUClockType_GPU_CLOCK_TYPE_VIDEO GPUClockType = 7
	// data clock
	GPUClockType_GPU_CLOCK_TYPE_DATA GPUClockType = 8
)

// Enum value maps for GPUClockType.
var (
	GPUClockType_name = map[int32]string{
		0: "GPU_CLOCK_TYPE_NONE",
		1: "GPU_CLOCK_TYPE_FABRIC",
		2: "GPU_CLOCK_TYPE_MEMORY",
		3: "GPU_CLOCK_TYPE_SYSTEM",
		4: "GPU_CLOCK_TYPE_SOC",
		5: "GPU_CLOCK_TYPE_DCE",
		6: "GPU_CLOCK_TYPE_PCIE",
		7: "GPU_CLOCK_TYPE_VIDEO",
		8: "GPU_CLOCK_TYPE_DATA",
	}
	GPUClockType_value = map[string]int32{
		"GPU_CLOCK_TYPE_NONE":   0,
		"GPU_CLOCK_TYPE_FABRIC": 1,
		"GPU_CLOCK_TYPE_MEMORY": 2,
		"GPU_CLOCK_TYPE_SYSTEM": 3,
		"GPU_CLOCK_TYPE_SOC":    4,
		"GPU_CLOCK_TYPE_DCE":    5,
		"GPU_CLOCK_TYPE_PCIE":   6,
		"GPU_CLOCK_TYPE_VIDEO":  7,
		"GPU_CLOCK_TYPE_DATA":   8,
	}
)

func (x GPUClockType) Enum() *GPUClockType {
	p := new(GPUClockType)
	*p = x
	return p
}

func (x GPUClockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUClockType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[1].Descriptor()
}

func (GPUClockType) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[1]
}

func (x GPUClockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUClockType.Descriptor instead.
func (GPUClockType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{1}
}

// powerplay performance levels
type GPUPerformanceLevel int32

const (
	GPUPerformanceLevel_GPU_PERF_LEVEL_NONE GPUPerformanceLevel = 0
	// performance level auto
	GPUPerformanceLevel_GPU_PERF_LEVEL_AUTO GPUPerformanceLevel = 1
	// performance level low
	GPUPerformanceLevel_GPU_PERF_LEVEL_LOW GPUPerformanceLevel = 2
	// performance level high
	GPUPerformanceLevel_GPU_PERF_LEVEL_HIGH GPUPerformanceLevel = 3
	// minimum performance variation
	GPUPerformanceLevel_GPU_PERF_LEVEL_DETERMINISTIC GPUPerformanceLevel = 4
	// stable power state with minimum memory clock
	GPUPerformanceLevel_GPU_PERF_LEVEL_STABLE_MIN_MCLK GPUPerformanceLevel = 5
	// stable power state with minimum system clock
	GPUPerformanceLevel_GPU_PERF_LEVEL_STABLE_MIN_SCLK GPUPerformanceLevel = 6
	// manual performance level
	GPUPerformanceLevel_GPU_PERF_LEVEL_MANUAL GPUPerformanceLevel = 7
)

// Enum value maps for GPUPerformanceLevel.
var (
	GPUPerformanceLevel_name = map[int32]string{
		0: "GPU_PERF_LEVEL_NONE",
		1: "GPU_PERF_LEVEL_AUTO",
		2: "GPU_PERF_LEVEL_LOW",
		3: "GPU_PERF_LEVEL_HIGH",
		4: "GPU_PERF_LEVEL_DETERMINISTIC",
		5: "GPU_PERF_LEVEL_STABLE_MIN_MCLK",
		6: "GPU_PERF_LEVEL_STABLE_MIN_SCLK",
		7: "GPU_PERF_LEVEL_MANUAL",
	}
	GPUPerformanceLevel_value = map[string]int32{
		"GPU_PERF_LEVEL_NONE":            0,
		"GPU_PERF_LEVEL_AUTO":            1,
		"GPU_PERF_LEVEL_LOW":             2,
		"GPU_PERF_LEVEL_HIGH":            3,
		"GPU_PERF_LEVEL_DETERMINISTIC":   4,
		"GPU_PERF_LEVEL_STABLE_MIN_MCLK": 5,
		"GPU_PERF_LEVEL_STABLE_MIN_SCLK": 6,
		"GPU_PERF_LEVEL_MANUAL":          7,
	}
)

func (x GPUPerformanceLevel) Enum() *GPUPerformanceLevel {
	p := new(GPUPerformanceLevel)
	*p = x
	return p
}

func (x GPUPerformanceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUPerformanceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[2].Descriptor()
}

func (GPUPerformanceLevel) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[2]
}

func (x GPUPerformanceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUPerformanceLevel.Descriptor instead.
func (GPUPerformanceLevel) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{2}
}

// GPU compute partition type
type GPUComputePartitionType int32

const (
	// unknown/invalid partition type
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_NONE GPUComputePartitionType = 0
	// single GPU mode
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_SPX GPUComputePartitionType = 1
	// dual GPU mode
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_DPX GPUComputePartitionType = 2
	// triple GPU mode
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_TPX GPUComputePartitionType = 3
	// quad GPU mode
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_QPX GPUComputePartitionType = 4
	// core GPU mode
	GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_CPX GPUComputePartitionType = 5
)

// Enum value maps for GPUComputePartitionType.
var (
	GPUComputePartitionType_name = map[int32]string{
		0: "GPU_COMPUTE_PARTITION_TYPE_NONE",
		1: "GPU_COMPUTE_PARTITION_TYPE_SPX",
		2: "GPU_COMPUTE_PARTITION_TYPE_DPX",
		3: "GPU_COMPUTE_PARTITION_TYPE_TPX",
		4: "GPU_COMPUTE_PARTITION_TYPE_QPX",
		5: "GPU_COMPUTE_PARTITION_TYPE_CPX",
	}
	GPUComputePartitionType_value = map[string]int32{
		"GPU_COMPUTE_PARTITION_TYPE_NONE": 0,
		"GPU_COMPUTE_PARTITION_TYPE_SPX":  1,
		"GPU_COMPUTE_PARTITION_TYPE_DPX":  2,
		"GPU_COMPUTE_PARTITION_TYPE_TPX":  3,
		"GPU_COMPUTE_PARTITION_TYPE_QPX":  4,
		"GPU_COMPUTE_PARTITION_TYPE_CPX":  5,
	}
)

func (x GPUComputePartitionType) Enum() *GPUComputePartitionType {
	p := new(GPUComputePartitionType)
	*p = x
	return p
}

func (x GPUComputePartitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUComputePartitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[3].Descriptor()
}

func (GPUComputePartitionType) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[3]
}

func (x GPUComputePartitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUComputePartitionType.Descriptor instead.
func (GPUComputePartitionType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{3}
}

// GPU memory partition type
type GPUMemoryPartitionType int32

const (
	// unknown/invalid memory partition type
	GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NONE GPUMemoryPartitionType = 0
	// one NUMA per socket
	GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NPS1 GPUMemoryPartitionType = 1
	// two NUMA per socket
	GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NPS2 GPUMemoryPartitionType = 2
	// four NUMA per socket
	GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NPS4 GPUMemoryPartitionType = 3
	// eight NUMA per socket
	GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NPS8 GPUMemoryPartitionType = 4
)

// Enum value maps for GPUMemoryPartitionType.
var (
	GPUMemoryPartitionType_name = map[int32]string{
		0: "GPU_MEMORY_PARTITION_TYPE_NONE",
		1: "GPU_MEMORY_PARTITION_TYPE_NPS1",
		2: "GPU_MEMORY_PARTITION_TYPE_NPS2",
		3: "GPU_MEMORY_PARTITION_TYPE_NPS4",
		4: "GPU_MEMORY_PARTITION_TYPE_NPS8",
	}
	GPUMemoryPartitionType_value = map[string]int32{
		"GPU_MEMORY_PARTITION_TYPE_NONE": 0,
		"GPU_MEMORY_PARTITION_TYPE_NPS1": 1,
		"GPU_MEMORY_PARTITION_TYPE_NPS2": 2,
		"GPU_MEMORY_PARTITION_TYPE_NPS4": 3,
		"GPU_MEMORY_PARTITION_TYPE_NPS8": 4,
	}
)

func (x GPUMemoryPartitionType) Enum() *GPUMemoryPartitionType {
	p := new(GPUMemoryPartitionType)
	*p = x
	return p
}

func (x GPUMemoryPartitionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUMemoryPartitionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[4].Descriptor()
}

func (GPUMemoryPartitionType) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[4]
}

func (x GPUMemoryPartitionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUMemoryPartitionType.Descriptor instead.
func (GPUMemoryPartitionType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{4}
}

// operational status of GPU
type GPUOperStatus int32

const (
	GPUOperStatus_GPU_OPER_STATUS_NONE GPUOperStatus = 0
	// GPU is operationally up
	GPUOperStatus_GPU_OPER_STATUS_UP GPUOperStatus = 1
	// GPU is operationally down
	GPUOperStatus_GPU_OPER_STATUS_DOWN GPUOperStatus = 2
)

// Enum value maps for GPUOperStatus.
var (
	GPUOperStatus_name = map[int32]string{
		0: "GPU_OPER_STATUS_NONE",
		1: "GPU_OPER_STATUS_UP",
		2: "GPU_OPER_STATUS_DOWN",
	}
	GPUOperStatus_value = map[string]int32{
		"GPU_OPER_STATUS_NONE": 0,
		"GPU_OPER_STATUS_UP":   1,
		"GPU_OPER_STATUS_DOWN": 2,
	}
)

func (x GPUOperStatus) Enum() *GPUOperStatus {
	p := new(GPUOperStatus)
	*p = x
	return p
}

func (x GPUOperStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUOperStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[5].Descriptor()
}

func (GPUOperStatus) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[5]
}

func (x GPUOperStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUOperStatus.Descriptor instead.
func (GPUOperStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{5}
}

// XGMI error status of GPU
type GPUXGMIErrorStatus int32

const (
	GPUXGMIErrorStatus_GPU_XGMI_STATUS_NONE GPUXGMIErrorStatus = 0
	// no errors since last read
	GPUXGMIErrorStatus_GPU_XGMI_STATUS_NO_ERROR GPUXGMIErrorStatus = 1
	// one error detected since last read
	GPUXGMIErrorStatus_GPU_XGMI_STATUS_ONE_ERROR GPUXGMIErrorStatus = 2
	// multiple errors detected since last read
	GPUXGMIErrorStatus_GPU_XGMI_STATUS_MULTIPLE_ERROR GPUXGMIErrorStatus = 3
)

// Enum value maps for GPUXGMIErrorStatus.
var (
	GPUXGMIErrorStatus_name = map[int32]string{
		0: "GPU_XGMI_STATUS_NONE",
		1: "GPU_XGMI_STATUS_NO_ERROR",
		2: "GPU_XGMI_STATUS_ONE_ERROR",
		3: "GPU_XGMI_STATUS_MULTIPLE_ERROR",
	}
	GPUXGMIErrorStatus_value = map[string]int32{
		"GPU_XGMI_STATUS_NONE":           0,
		"GPU_XGMI_STATUS_NO_ERROR":       1,
		"GPU_XGMI_STATUS_ONE_ERROR":      2,
		"GPU_XGMI_STATUS_MULTIPLE_ERROR": 3,
	}
)

func (x GPUXGMIErrorStatus) Enum() *GPUXGMIErrorStatus {
	p := new(GPUXGMIErrorStatus)
	*p = x
	return p
}

func (x GPUXGMIErrorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUXGMIErrorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[6].Descriptor()
}

func (GPUXGMIErrorStatus) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[6]
}

func (x GPUXGMIErrorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUXGMIErrorStatus.Descriptor instead.
func (GPUXGMIErrorStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{6}
}

// PCIe slot type
type PCIeSlotType int32

const (
	PCIeSlotType_PCIE_SLOT_TYPE_NONE    PCIeSlotType = 0
	PCIeSlotType_PCIE_SLOT_TYPE_PCIE    PCIeSlotType = 1
	PCIeSlotType_PCIE_SLOT_TYPE_OAM     PCIeSlotType = 2
	PCIeSlotType_PCIE_SLOT_TYPE_CEM     PCIeSlotType = 3
	PCIeSlotType_PCIE_SLOT_TYPE_UNKNOWN PCIeSlotType = 4
)

// Enum value maps for PCIeSlotType.
var (
	PCIeSlotType_name = map[int32]string{
		0: "PCIE_SLOT_TYPE_NONE",
		1: "PCIE_SLOT_TYPE_PCIE",
		2: "PCIE_SLOT_TYPE_OAM",
		3: "PCIE_SLOT_TYPE_CEM",
		4: "PCIE_SLOT_TYPE_UNKNOWN",
	}
	PCIeSlotType_value = map[string]int32{
		"PCIE_SLOT_TYPE_NONE":    0,
		"PCIE_SLOT_TYPE_PCIE":    1,
		"PCIE_SLOT_TYPE_OAM":     2,
		"PCIE_SLOT_TYPE_CEM":     3,
		"PCIE_SLOT_TYPE_UNKNOWN": 4,
	}
)

func (x PCIeSlotType) Enum() *PCIeSlotType {
	p := new(PCIeSlotType)
	*p = x
	return p
}

func (x PCIeSlotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PCIeSlotType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[7].Descriptor()
}

func (PCIeSlotType) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[7]
}

func (x PCIeSlotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PCIeSlotType.Descriptor instead.
func (PCIeSlotType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{7}
}

// VRAM memory type
type VRAMType int32

const (
	VRAMType_VRAM_TYPE_NONE    VRAMType = 0
	VRAMType_VRAM_TYPE_HBM     VRAMType = 1
	VRAMType_VRAM_TYPE_HBM2    VRAMType = 2
	VRAMType_VRAM_TYPE_HBM2E   VRAMType = 3
	VRAMType_VRAM_TYPE_HBM3    VRAMType = 4
	VRAMType_VRAM_TYPE_DDR2    VRAMType = 5
	VRAMType_VRAM_TYPE_DDR3    VRAMType = 6
	VRAMType_VRAM_TYPE_DDR4    VRAMType = 7
	VRAMType_VRAM_TYPE_GDDR1   VRAMType = 8
	VRAMType_VRAM_TYPE_GDDR2   VRAMType = 9
	VRAMType_VRAM_TYPE_GDDR3   VRAMType = 10
	VRAMType_VRAM_TYPE_GDDR4   VRAMType = 11
	VRAMType_VRAM_TYPE_GDDR5   VRAMType = 12
	VRAMType_VRAM_TYPE_GDDR6   VRAMType = 13
	VRAMType_VRAM_TYPE_GDDR7   VRAMType = 14
	VRAMType_VRAM_TYPE_UNKNOWN VRAMType = 15
)

// Enum value maps for VRAMType.
var (
	VRAMType_name = map[int32]string{
		0:  "VRAM_TYPE_NONE",
		1:  "VRAM_TYPE_HBM",
		2:  "VRAM_TYPE_HBM2",
		3:  "VRAM_TYPE_HBM2E",
		4:  "VRAM_TYPE_HBM3",
		5:  "VRAM_TYPE_DDR2",
		6:  "VRAM_TYPE_DDR3",
		7:  "VRAM_TYPE_DDR4",
		8:  "VRAM_TYPE_GDDR1",
		9:  "VRAM_TYPE_GDDR2",
		10: "VRAM_TYPE_GDDR3",
		11: "VRAM_TYPE_GDDR4",
		12: "VRAM_TYPE_GDDR5",
		13: "VRAM_TYPE_GDDR6",
		14: "VRAM_TYPE_GDDR7",
		15: "VRAM_TYPE_UNKNOWN",
	}
	VRAMType_value = map[string]int32{
		"VRAM_TYPE_NONE":    0,
		"VRAM_TYPE_HBM":     1,
		"VRAM_TYPE_HBM2":    2,
		"VRAM_TYPE_HBM2E":   3,
		"VRAM_TYPE_HBM3":    4,
		"VRAM_TYPE_DDR2":    5,
		"VRAM_TYPE_DDR3":    6,
		"VRAM_TYPE_DDR4":    7,
		"VRAM_TYPE_GDDR1":   8,
		"VRAM_TYPE_GDDR2":   9,
		"VRAM_TYPE_GDDR3":   10,
		"VRAM_TYPE_GDDR4":   11,
		"VRAM_TYPE_GDDR5":   12,
		"VRAM_TYPE_GDDR6":   13,
		"VRAM_TYPE_GDDR7":   14,
		"VRAM_TYPE_UNKNOWN": 15,
	}
)

func (x VRAMType) Enum() *VRAMType {
	p := new(VRAMType)
	*p = x
	return p
}

func (x VRAMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VRAMType) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[8].Descriptor()
}

func (VRAMType) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[8]
}

func (x VRAMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VRAMType.Descriptor instead.
func (VRAMType) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{8}
}

// GPU throttling status
type GPUThrottlingStatus int32

const (
	GPUThrottlingStatus_GPU_THROTTLING_STATUS_NONE GPUThrottlingStatus = 0
	// throttling off
	GPUThrottlingStatus_GPU_THROTTLING_STATUS_OFF GPUThrottlingStatus = 1
	// throttling on
	GPUThrottlingStatus_GPU_THROTTLING_STATUS_ON GPUThrottlingStatus = 2
)

// Enum value maps for GPUThrottlingStatus.
var (
	GPUThrottlingStatus_name = map[int32]string{
		0: "GPU_THROTTLING_STATUS_NONE",
		1: "GPU_THROTTLING_STATUS_OFF",
		2: "GPU_THROTTLING_STATUS_ON",
	}
	GPUThrottlingStatus_value = map[string]int32{
		"GPU_THROTTLING_STATUS_NONE": 0,
		"GPU_THROTTLING_STATUS_OFF":  1,
		"GPU_THROTTLING_STATUS_ON":   2,
	}
)

func (x GPUThrottlingStatus) Enum() *GPUThrottlingStatus {
	p := new(GPUThrottlingStatus)
	*p = x
	return p
}

func (x GPUThrottlingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUThrottlingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[9].Descriptor()
}

func (GPUThrottlingStatus) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[9]
}

func (x GPUThrottlingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUThrottlingStatus.Descriptor instead.
func (GPUThrottlingStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{9}
}

// GPU page status
type GPUPageStatus int32

const (
	GPUPageStatus_GPU_PAGE_STATUS_NONE GPUPageStatus = 0
	// GPU page is reserved
	GPUPageStatus_GPU_PAGE_STATUS_RESERVED GPUPageStatus = 1
	// GPU page is marked as bad and will be marked reserved at next window
	GPUPageStatus_GPU_PAGE_STATUS_PENDING GPUPageStatus = 2
	// unable to reserve GPU page
	GPUPageStatus_GPU_PAGE_STATUS_UNRESERVABLE GPUPageStatus = 3
)

// Enum value maps for GPUPageStatus.
var (
	GPUPageStatus_name = map[int32]string{
		0: "GPU_PAGE_STATUS_NONE",
		1: "GPU_PAGE_STATUS_RESERVED",
		2: "GPU_PAGE_STATUS_PENDING",
		3: "GPU_PAGE_STATUS_UNRESERVABLE",
	}
	GPUPageStatus_value = map[string]int32{
		"GPU_PAGE_STATUS_NONE":         0,
		"GPU_PAGE_STATUS_RESERVED":     1,
		"GPU_PAGE_STATUS_PENDING":      2,
		"GPU_PAGE_STATUS_UNRESERVABLE": 3,
	}
)

func (x GPUPageStatus) Enum() *GPUPageStatus {
	p := new(GPUPageStatus)
	*p = x
	return p
}

func (x GPUPageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUPageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gpu_proto_enumTypes[10].Descriptor()
}

func (GPUPageStatus) Type() protoreflect.EnumType {
	return &file_gpu_proto_enumTypes[10]
}

func (x GPUPageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPUPageStatus.Descriptor instead.
func (GPUPageStatus) EnumDescriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{10}
}

// clock frequency range
// NOTE:
// values are in MHz
type GPUClockFrequencyRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clock type
	ClockType GPUClockType `protobuf:"varint,1,opt,name=ClockType,proto3,enum=amdgpu.GPUClockType" json:"ClockType,omitempty"`
	// low frequency value
	LowFrequency uint32 `protobuf:"varint,2,opt,name=LowFrequency,proto3" json:"LowFrequency,omitempty"`
	// high frequency value
	HighFrequency uint32 `protobuf:"varint,3,opt,name=HighFrequency,proto3" json:"HighFrequency,omitempty"`
}

func (x *GPUClockFrequencyRange) Reset() {
	*x = GPUClockFrequencyRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUClockFrequencyRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUClockFrequencyRange) ProtoMessage() {}

func (x *GPUClockFrequencyRange) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUClockFrequencyRange.ProtoReflect.Descriptor instead.
func (*GPUClockFrequencyRange) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{0}
}

func (x *GPUClockFrequencyRange) GetClockType() GPUClockType {
	if x != nil {
		return x.ClockType
	}
	return GPUClockType_GPU_CLOCK_TYPE_NONE
}

func (x *GPUClockFrequencyRange) GetLowFrequency() uint32 {
	if x != nil {
		return x.LowFrequency
	}
	return 0
}

func (x *GPUClockFrequencyRange) GetHighFrequency() uint32 {
	if x != nil {
		return x.HighFrequency
	}
	return 0
}

// RAS configuration per block
// TODO: fill this !!
type GPURASSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GPURASSpec) Reset() {
	*x = GPURASSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPURASSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPURASSpec) ProtoMessage() {}

func (x *GPURASSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPURASSpec.ProtoReflect.Descriptor instead.
func (*GPURASSpec) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{1}
}

// config specification of physical GPU
type GPUSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid identifying the GPU
	// this uuid is generated and will be unique across the GPU cluster
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// admin state of the GPU device
	AdminState GPUAdminState `protobuf:"varint,2,opt,name=AdminState,proto3,enum=amdgpu.GPUAdminState" json:"AdminState,omitempty"`
	// GPU clock overdrive level (as percentage)
	OverDriveLevel uint32 `protobuf:"varint,3,opt,name=OverDriveLevel,proto3" json:"OverDriveLevel,omitempty"`
	// max package power (in Watts) GPU can consume (i.e power cap)
	GPUPowerCap uint64 `protobuf:"varint,4,opt,name=GPUPowerCap,proto3" json:"GPUPowerCap,omitempty"`
	// GPU performance level
	PerformanceLevel GPUPerformanceLevel `protobuf:"varint,5,opt,name=PerformanceLevel,proto3,enum=amdgpu.GPUPerformanceLevel" json:"PerformanceLevel,omitempty"`
	// GPU clock speed/frequency setting
	ClockFrequency []*GPUClockFrequencyRange `protobuf:"bytes,6,rep,name=ClockFrequency,proto3" json:"ClockFrequency,omitempty"`
	// fan speed; allowed range 0 - 255
	FanSpeed uint64 `protobuf:"varint,7,opt,name=FanSpeed,proto3" json:"FanSpeed,omitempty"`
	// RAS configuration
	RASSpec *GPURASSpec `protobuf:"bytes,8,opt,name=RASSpec,proto3" json:"RASSpec,omitempty"`
	// GPU compute partition type; partition type SPX means unpartitioned GPU
	ComputePartitionType GPUComputePartitionType `protobuf:"varint,9,opt,name=ComputePartitionType,proto3,enum=amdgpu.GPUComputePartitionType" json:"ComputePartitionType,omitempty"`
	// GPU memory partition type; partition type NPS1 means unpartitioned memory
	MemoryPartitionType GPUMemoryPartitionType `protobuf:"varint,10,opt,name=MemoryPartitionType,proto3,enum=amdgpu.GPUMemoryPartitionType" json:"MemoryPartitionType,omitempty"`
}

func (x *GPUSpec) Reset() {
	*x = GPUSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSpec) ProtoMessage() {}

func (x *GPUSpec) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSpec.ProtoReflect.Descriptor instead.
func (*GPUSpec) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{2}
}

func (x *GPUSpec) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GPUSpec) GetAdminState() GPUAdminState {
	if x != nil {
		return x.AdminState
	}
	return GPUAdminState_GPU_ADMIN_STATE_NONE
}

func (x *GPUSpec) GetOverDriveLevel() uint32 {
	if x != nil {
		return x.OverDriveLevel
	}
	return 0
}

func (x *GPUSpec) GetGPUPowerCap() uint64 {
	if x != nil {
		return x.GPUPowerCap
	}
	return 0
}

func (x *GPUSpec) GetPerformanceLevel() GPUPerformanceLevel {
	if x != nil {
		return x.PerformanceLevel
	}
	return GPUPerformanceLevel_GPU_PERF_LEVEL_NONE
}

func (x *GPUSpec) GetClockFrequency() []*GPUClockFrequencyRange {
	if x != nil {
		return x.ClockFrequency
	}
	return nil
}

func (x *GPUSpec) GetFanSpeed() uint64 {
	if x != nil {
		return x.FanSpeed
	}
	return 0
}

func (x *GPUSpec) GetRASSpec() *GPURASSpec {
	if x != nil {
		return x.RASSpec
	}
	return nil
}

func (x *GPUSpec) GetComputePartitionType() GPUComputePartitionType {
	if x != nil {
		return x.ComputePartitionType
	}
	return GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_NONE
}

func (x *GPUSpec) GetMemoryPartitionType() GPUMemoryPartitionType {
	if x != nil {
		return x.MemoryPartitionType
	}
	return GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NONE
}

// XGMI status of GPU
type GPUXGMIStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XGMI error status
	ErrorStatus GPUXGMIErrorStatus `protobuf:"varint,1,opt,name=ErrorStatus,proto3,enum=amdgpu.GPUXGMIErrorStatus" json:"ErrorStatus,omitempty"`
	// XGMI link width in GB/s
	Width uint64 `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`
	// XGMI link speed in GB/s
	Speed uint64 `protobuf:"varint,3,opt,name=Speed,proto3" json:"Speed,omitempty"`
}

func (x *GPUXGMIStatus) Reset() {
	*x = GPUXGMIStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUXGMIStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUXGMIStatus) ProtoMessage() {}

func (x *GPUXGMIStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUXGMIStatus.ProtoReflect.Descriptor instead.
func (*GPUXGMIStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{3}
}

func (x *GPUXGMIStatus) GetErrorStatus() GPUXGMIErrorStatus {
	if x != nil {
		return x.ErrorStatus
	}
	return GPUXGMIErrorStatus_GPU_XGMI_STATUS_NONE
}

func (x *GPUXGMIStatus) GetWidth() uint64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GPUXGMIStatus) GetSpeed() uint64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

// clock information
type GPUClockStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// clock type
	Type GPUClockType `protobuf:"varint,1,opt,name=Type,proto3,enum=amdgpu.GPUClockType" json:"Type,omitempty"`
	// clock frequency in MHz
	Frequency uint32 `protobuf:"varint,2,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	// low frequency value
	LowFrequency uint32 `protobuf:"varint,3,opt,name=LowFrequency,proto3" json:"LowFrequency,omitempty"`
	// high frequency value
	HighFrequency uint32 `protobuf:"varint,4,opt,name=HighFrequency,proto3" json:"HighFrequency,omitempty"`
	// clock is locked or not
	// NOTE:
	// applicable only for system (grpahics) clock
	Locked bool `protobuf:"varint,5,opt,name=Locked,proto3" json:"Locked,omitempty"`
	// clock is in deep sleep
	DeepSleep bool `protobuf:"varint,6,opt,name=DeepSleep,proto3" json:"DeepSleep,omitempty"`
}

func (x *GPUClockStatus) Reset() {
	*x = GPUClockStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUClockStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUClockStatus) ProtoMessage() {}

func (x *GPUClockStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUClockStatus.ProtoReflect.Descriptor instead.
func (*GPUClockStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{4}
}

func (x *GPUClockStatus) GetType() GPUClockType {
	if x != nil {
		return x.Type
	}
	return GPUClockType_GPU_CLOCK_TYPE_NONE
}

func (x *GPUClockStatus) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GPUClockStatus) GetLowFrequency() uint32 {
	if x != nil {
		return x.LowFrequency
	}
	return 0
}

func (x *GPUClockStatus) GetHighFrequency() uint32 {
	if x != nil {
		return x.HighFrequency
	}
	return 0
}

func (x *GPUClockStatus) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

func (x *GPUClockStatus) GetDeepSleep() bool {
	if x != nil {
		return x.DeepSleep
	}
	return false
}

// voltage curve point
type GPUVoltageCurvePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// curve point
	Point uint32 `protobuf:"varint,1,opt,name=Point,proto3" json:"Point,omitempty"`
	// frequency in MHz
	Frequency uint32 `protobuf:"varint,2,opt,name=Frequency,proto3" json:"Frequency,omitempty"`
	// voltage
	Voltage uint32 `protobuf:"varint,3,opt,name=Voltage,proto3" json:"Voltage,omitempty"`
}

func (x *GPUVoltageCurvePoint) Reset() {
	*x = GPUVoltageCurvePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUVoltageCurvePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUVoltageCurvePoint) ProtoMessage() {}

func (x *GPUVoltageCurvePoint) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUVoltageCurvePoint.ProtoReflect.Descriptor instead.
func (*GPUVoltageCurvePoint) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{5}
}

func (x *GPUVoltageCurvePoint) GetPoint() uint32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GPUVoltageCurvePoint) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GPUVoltageCurvePoint) GetVoltage() uint32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

// RAS information per block
type GPURASStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GPURASStatus) Reset() {
	*x = GPURASStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPURASStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPURASStatus) ProtoMessage() {}

func (x *GPURASStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPURASStatus.ProtoReflect.Descriptor instead.
func (*GPURASStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{6}
}

// firmware version information
type GPUFirmwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the component
	Firmware string `protobuf:"bytes,1,opt,name=Firmware,proto3" json:"Firmware,omitempty"`
	// firmware version of the component
	Version string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *GPUFirmwareVersion) Reset() {
	*x = GPUFirmwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUFirmwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUFirmwareVersion) ProtoMessage() {}

func (x *GPUFirmwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUFirmwareVersion.ProtoReflect.Descriptor instead.
func (*GPUFirmwareVersion) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{7}
}

func (x *GPUFirmwareVersion) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

func (x *GPUFirmwareVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GPUPCIeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PCIe card form factor
	SlotType PCIeSlotType `protobuf:"varint,1,opt,name=SlotType,proto3,enum=amdgpu.PCIeSlotType" json:"SlotType,omitempty"`
	// PCIe interface version
	Version uint32 `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	// PCIe bus id of the GPU
	PCIeBusId string `protobuf:"bytes,3,opt,name=PCIeBusId,proto3" json:"PCIeBusId,omitempty"`
	// current PCIe lanes
	Width uint32 `protobuf:"varint,4,opt,name=Width,proto3" json:"Width,omitempty"`
	// maximum number of PCIe lanes
	MaxWidth uint32 `protobuf:"varint,5,opt,name=MaxWidth,proto3" json:"MaxWidth,omitempty"`
	// current PCIe speed (in GT/s)
	Speed uint32 `protobuf:"varint,6,opt,name=Speed,proto3" json:"Speed,omitempty"`
	// maximum PCIe speed (in GT/s)
	MaxSpeed uint32 `protobuf:"varint,7,opt,name=MaxSpeed,proto3" json:"MaxSpeed,omitempty"`
	// current PCIe bandwidth (in MB/s)
	Bandwidth uint64 `protobuf:"varint,8,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"`
}

func (x *GPUPCIeStatus) Reset() {
	*x = GPUPCIeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUPCIeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUPCIeStatus) ProtoMessage() {}

func (x *GPUPCIeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUPCIeStatus.ProtoReflect.Descriptor instead.
func (*GPUPCIeStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{8}
}

func (x *GPUPCIeStatus) GetSlotType() PCIeSlotType {
	if x != nil {
		return x.SlotType
	}
	return PCIeSlotType_PCIE_SLOT_TYPE_NONE
}

func (x *GPUPCIeStatus) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *GPUPCIeStatus) GetPCIeBusId() string {
	if x != nil {
		return x.PCIeBusId
	}
	return ""
}

func (x *GPUPCIeStatus) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GPUPCIeStatus) GetMaxWidth() uint32 {
	if x != nil {
		return x.MaxWidth
	}
	return 0
}

func (x *GPUPCIeStatus) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *GPUPCIeStatus) GetMaxSpeed() uint32 {
	if x != nil {
		return x.MaxSpeed
	}
	return 0
}

func (x *GPUPCIeStatus) GetBandwidth() uint64 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type GPUVRAMStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VRAM memory type
	Type VRAMType `protobuf:"varint,1,opt,name=Type,proto3,enum=amdgpu.VRAMType" json:"Type,omitempty"`
	// VRAM vendor
	Vendor string `protobuf:"bytes,2,opt,name=Vendor,proto3" json:"Vendor,omitempty"`
	// VRAM size (in MB)
	Size uint64 `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *GPUVRAMStatus) Reset() {
	*x = GPUVRAMStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUVRAMStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUVRAMStatus) ProtoMessage() {}

func (x *GPUVRAMStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUVRAMStatus.ProtoReflect.Descriptor instead.
func (*GPUVRAMStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{9}
}

func (x *GPUVRAMStatus) GetType() VRAMType {
	if x != nil {
		return x.Type
	}
	return VRAMType_VRAM_TYPE_NONE
}

func (x *GPUVRAMStatus) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *GPUVRAMStatus) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// GPU bad page record
type GPUBadPageRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid identifying the GPU
	GPU []byte `protobuf:"bytes,1,opt,name=GPU,proto3" json:"GPU,omitempty"`
	// start address of page
	PageAddress uint64 `protobuf:"varint,2,opt,name=PageAddress,proto3" json:"PageAddress,omitempty"`
	// page size
	PageSize uint64 `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	// page status
	PageStatus GPUPageStatus `protobuf:"varint,4,opt,name=PageStatus,proto3,enum=amdgpu.GPUPageStatus" json:"PageStatus,omitempty"`
}

func (x *GPUBadPageRecord) Reset() {
	*x = GPUBadPageRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUBadPageRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUBadPageRecord) ProtoMessage() {}

func (x *GPUBadPageRecord) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUBadPageRecord.ProtoReflect.Descriptor instead.
func (*GPUBadPageRecord) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{10}
}

func (x *GPUBadPageRecord) GetGPU() []byte {
	if x != nil {
		return x.GPU
	}
	return nil
}

func (x *GPUBadPageRecord) GetPageAddress() uint64 {
	if x != nil {
		return x.PageAddress
	}
	return 0
}

func (x *GPUBadPageRecord) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GPUBadPageRecord) GetPageStatus() GPUPageStatus {
	if x != nil {
		return x.PageStatus
	}
	return GPUPageStatus_GPU_PAGE_STATUS_NONE
}

// GPU bad page get request
type GPUBadPageGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GPUBadPageGetRequest) Reset() {
	*x = GPUBadPageGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUBadPageGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUBadPageGetRequest) ProtoMessage() {}

func (x *GPUBadPageGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUBadPageGetRequest.ProtoReflect.Descriptor instead.
func (*GPUBadPageGetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{11}
}

func (x *GPUBadPageGetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// response to GPU bad page get request
type GPUBadPageGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
	// GPU bad page records
	Record []*GPUBadPageRecord `protobuf:"bytes,3,rep,name=Record,proto3" json:"Record,omitempty"`
}

func (x *GPUBadPageGetResponse) Reset() {
	*x = GPUBadPageGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUBadPageGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUBadPageGetResponse) ProtoMessage() {}

func (x *GPUBadPageGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUBadPageGetResponse.ProtoReflect.Descriptor instead.
func (*GPUBadPageGetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{12}
}

func (x *GPUBadPageGetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUBadPageGetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

func (x *GPUBadPageGetResponse) GetRecord() []*GPUBadPageRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

// operational information of a physical GPU
type GPUStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// assigned GPU index local to the compute node
	Index uint32 `protobuf:"varint,1,opt,name=Index,proto3" json:"Index,omitempty"`
	// GPU handle
	GPUHandle uint64 `protobuf:"varint,2,opt,name=GPUHandle,proto3" json:"GPUHandle,omitempty"`
	// serial number of the GPU
	SerialNum string `protobuf:"bytes,3,opt,name=SerialNum,proto3" json:"SerialNum,omitempty"`
	// product series of the GPU
	CardSeries string `protobuf:"bytes,4,opt,name=CardSeries,proto3" json:"CardSeries,omitempty"`
	// model of the GPU
	CardModel string `protobuf:"bytes,5,opt,name=CardModel,proto3" json:"CardModel,omitempty"`
	// GPU vendor
	CardVendor string `protobuf:"bytes,6,opt,name=CardVendor,proto3" json:"CardVendor,omitempty"`
	// SKU of the GPU card
	CardSKU string `protobuf:"bytes,7,opt,name=CardSKU,proto3" json:"CardSKU,omitempty"`
	// operational status of the device
	OperStatus GPUOperStatus `protobuf:"varint,8,opt,name=OperStatus,proto3,enum=amdgpu.GPUOperStatus" json:"OperStatus,omitempty"`
	// driver version
	DriverVersion string `protobuf:"bytes,9,opt,name=DriverVersion,proto3" json:"DriverVersion,omitempty"`
	// VBIOS part number
	VBIOSPartNumber string `protobuf:"bytes,10,opt,name=VBIOSPartNumber,proto3" json:"VBIOSPartNumber,omitempty"`
	// VBIOS version
	VBIOSVersion string `protobuf:"bytes,11,opt,name=VBIOSVersion,proto3" json:"VBIOSVersion,omitempty"`
	// firmware versions of various components
	FirmwareVersion []*GPUFirmwareVersion `protobuf:"bytes,12,rep,name=FirmwareVersion,proto3" json:"FirmwareVersion,omitempty"`
	// memory component vendor
	MemoryVendor string `protobuf:"bytes,13,opt,name=MemoryVendor,proto3" json:"MemoryVendor,omitempty"`
	// GPU clock status
	ClockStatus []*GPUClockStatus `protobuf:"bytes,14,rep,name=ClockStatus,proto3" json:"ClockStatus,omitempty"`
	// Kernel Fusion Driver (KFD) process ids using the GPU
	KFDProcessId []uint32 `protobuf:"varint,15,rep,packed,name=KFDProcessId,proto3" json:"KFDProcessId,omitempty"`
	// RAS (Reliability, Availability & Serviceability) information
	RASStatus *GPURASStatus `protobuf:"bytes,16,opt,name=RASStatus,proto3" json:"RASStatus,omitempty"`
	// XGMI status
	XGMIStatus *GPUXGMIStatus `protobuf:"bytes,17,opt,name=XGMIStatus,proto3" json:"XGMIStatus,omitempty"`
	// VRAM status
	VRAMStatus *GPUVRAMStatus `protobuf:"bytes,18,opt,name=VRAMStatus,proto3" json:"VRAMStatus,omitempty"`
	// PCIe status
	PCIeStatus *GPUPCIeStatus `protobuf:"bytes,19,opt,name=PCIeStatus,proto3" json:"PCIeStatus,omitempty"`
	// throttling status
	ThrottlingStatus GPUThrottlingStatus `protobuf:"varint,20,opt,name=ThrottlingStatus,proto3,enum=amdgpu.GPUThrottlingStatus" json:"ThrottlingStatus,omitempty"`
	// firmware timestamp in ns (10ns resolution)
	FWTimestamp uint64 `protobuf:"varint,21,opt,name=FWTimestamp,proto3" json:"FWTimestamp,omitempty"`
	// GPU compute partition id; only valid when partition type is not SPX
	PartitionId uint32 `protobuf:"varint,22,opt,name=PartitionId,proto3" json:"PartitionId,omitempty"`
	// GPU partitions (aka. child GPUs)
	// NOTE:
	// only valid for physical GPUs which have been partitioned
	GPUPartition [][]byte `protobuf:"bytes,23,rep,name=GPUPartition,proto3" json:"GPUPartition,omitempty"`
	// physical GPU (aka. parent GPU)
	// NOTE:
	// only valid for GPU partitions (child GPUs)
	PhysicalGPU []byte `protobuf:"bytes,24,opt,name=PhysicalGPU,proto3" json:"PhysicalGPU,omitempty"`
	// GPU KFD id
	KFDId uint64 `protobuf:"varint,25,opt,name=KFDId,proto3" json:"KFDId,omitempty"`
	// GPU node id
	NodeId uint32 `protobuf:"varint,26,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	// GPU device DRM render Id
	DRMRenderId uint32 `protobuf:"varint,27,opt,name=DRMRenderId,proto3" json:"DRMRenderId,omitempty"`
	// GPU device DRM  card Id
	DRMCardId uint32 `protobuf:"varint,28,opt,name=DRMCardId,proto3" json:"DRMCardId,omitempty"`
}

func (x *GPUStatus) Reset() {
	*x = GPUStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUStatus) ProtoMessage() {}

func (x *GPUStatus) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUStatus.ProtoReflect.Descriptor instead.
func (*GPUStatus) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{13}
}

func (x *GPUStatus) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GPUStatus) GetGPUHandle() uint64 {
	if x != nil {
		return x.GPUHandle
	}
	return 0
}

func (x *GPUStatus) GetSerialNum() string {
	if x != nil {
		return x.SerialNum
	}
	return ""
}

func (x *GPUStatus) GetCardSeries() string {
	if x != nil {
		return x.CardSeries
	}
	return ""
}

func (x *GPUStatus) GetCardModel() string {
	if x != nil {
		return x.CardModel
	}
	return ""
}

func (x *GPUStatus) GetCardVendor() string {
	if x != nil {
		return x.CardVendor
	}
	return ""
}

func (x *GPUStatus) GetCardSKU() string {
	if x != nil {
		return x.CardSKU
	}
	return ""
}

func (x *GPUStatus) GetOperStatus() GPUOperStatus {
	if x != nil {
		return x.OperStatus
	}
	return GPUOperStatus_GPU_OPER_STATUS_NONE
}

func (x *GPUStatus) GetDriverVersion() string {
	if x != nil {
		return x.DriverVersion
	}
	return ""
}

func (x *GPUStatus) GetVBIOSPartNumber() string {
	if x != nil {
		return x.VBIOSPartNumber
	}
	return ""
}

func (x *GPUStatus) GetVBIOSVersion() string {
	if x != nil {
		return x.VBIOSVersion
	}
	return ""
}

func (x *GPUStatus) GetFirmwareVersion() []*GPUFirmwareVersion {
	if x != nil {
		return x.FirmwareVersion
	}
	return nil
}

func (x *GPUStatus) GetMemoryVendor() string {
	if x != nil {
		return x.MemoryVendor
	}
	return ""
}

func (x *GPUStatus) GetClockStatus() []*GPUClockStatus {
	if x != nil {
		return x.ClockStatus
	}
	return nil
}

func (x *GPUStatus) GetKFDProcessId() []uint32 {
	if x != nil {
		return x.KFDProcessId
	}
	return nil
}

func (x *GPUStatus) GetRASStatus() *GPURASStatus {
	if x != nil {
		return x.RASStatus
	}
	return nil
}

func (x *GPUStatus) GetXGMIStatus() *GPUXGMIStatus {
	if x != nil {
		return x.XGMIStatus
	}
	return nil
}

func (x *GPUStatus) GetVRAMStatus() *GPUVRAMStatus {
	if x != nil {
		return x.VRAMStatus
	}
	return nil
}

func (x *GPUStatus) GetPCIeStatus() *GPUPCIeStatus {
	if x != nil {
		return x.PCIeStatus
	}
	return nil
}

func (x *GPUStatus) GetThrottlingStatus() GPUThrottlingStatus {
	if x != nil {
		return x.ThrottlingStatus
	}
	return GPUThrottlingStatus_GPU_THROTTLING_STATUS_NONE
}

func (x *GPUStatus) GetFWTimestamp() uint64 {
	if x != nil {
		return x.FWTimestamp
	}
	return 0
}

func (x *GPUStatus) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *GPUStatus) GetGPUPartition() [][]byte {
	if x != nil {
		return x.GPUPartition
	}
	return nil
}

func (x *GPUStatus) GetPhysicalGPU() []byte {
	if x != nil {
		return x.PhysicalGPU
	}
	return nil
}

func (x *GPUStatus) GetKFDId() uint64 {
	if x != nil {
		return x.KFDId
	}
	return 0
}

func (x *GPUStatus) GetNodeId() uint32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GPUStatus) GetDRMRenderId() uint32 {
	if x != nil {
		return x.DRMRenderId
	}
	return 0
}

func (x *GPUStatus) GetDRMCardId() uint32 {
	if x != nil {
		return x.DRMCardId
	}
	return 0
}

// GPU temperature information
// NOTE:
// all temperatures are in centigrade
type GPUTemperatureStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// edge temperature
	EdgeTemperature float32 `protobuf:"fixed32,1,opt,name=EdgeTemperature,proto3" json:"EdgeTemperature,omitempty"`
	// junction/hotspot temperature
	JunctionTemperature float32 `protobuf:"fixed32,2,opt,name=JunctionTemperature,proto3" json:"JunctionTemperature,omitempty"`
	// VRAM temperature
	MemoryTemperature float32 `protobuf:"fixed32,3,opt,name=MemoryTemperature,proto3" json:"MemoryTemperature,omitempty"`
	// HBM temperatures
	HBMTemperature []float32 `protobuf:"fixed32,4,rep,packed,name=HBMTemperature,proto3" json:"HBMTemperature,omitempty"`
}

func (x *GPUTemperatureStats) Reset() {
	*x = GPUTemperatureStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUTemperatureStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUTemperatureStats) ProtoMessage() {}

func (x *GPUTemperatureStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUTemperatureStats.ProtoReflect.Descriptor instead.
func (*GPUTemperatureStats) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{14}
}

func (x *GPUTemperatureStats) GetEdgeTemperature() float32 {
	if x != nil {
		return x.EdgeTemperature
	}
	return 0
}

func (x *GPUTemperatureStats) GetJunctionTemperature() float32 {
	if x != nil {
		return x.JunctionTemperature
	}
	return 0
}

func (x *GPUTemperatureStats) GetMemoryTemperature() float32 {
	if x != nil {
		return x.MemoryTemperature
	}
	return 0
}

func (x *GPUTemperatureStats) GetHBMTemperature() []float32 {
	if x != nil {
		return x.HBMTemperature
	}
	return nil
}

// GPU usage as percentage of time GPU is busy
type GPUUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// usage of graphics engine as a percentage
	GFXActivity uint32 `protobuf:"varint,1,opt,name=GFXActivity,proto3" json:"GFXActivity,omitempty"`
	// usage of Unified Memory Controller (UMC) engine as a percentage
	UMCActivity uint32 `protobuf:"varint,2,opt,name=UMCActivity,proto3" json:"UMCActivity,omitempty"`
	// usage of MultiMedia (MM) engine as a percentage
	MMActivity uint32 `protobuf:"varint,3,opt,name=MMActivity,proto3" json:"MMActivity,omitempty"`
	// Video Core Next (VCN) activity as a percentage
	VCNActivity []uint32 `protobuf:"varint,4,rep,packed,name=VCNActivity,proto3" json:"VCNActivity,omitempty"`
	// JPEG activity as a percentage
	JPEGActivity []uint32 `protobuf:"varint,5,rep,packed,name=JPEGActivity,proto3" json:"JPEGActivity,omitempty"`
	// instantaneous graphics utilization per accelerated compute core as a
	// percentage
	GFXBusyInst []uint32 `protobuf:"varint,6,rep,packed,name=GFXBusyInst,proto3" json:"GFXBusyInst,omitempty"`
	// instantaneous JPEG utilization per JPEG engine as a percentage
	JPEGBusyInst []uint32 `protobuf:"varint,7,rep,packed,name=JPEGBusyInst,proto3" json:"JPEGBusyInst,omitempty"`
	// instantaneous VCN utilization as a percentage
	VCNBusyInst []uint32 `protobuf:"varint,8,rep,packed,name=VCNBusyInst,proto3" json:"VCNBusyInst,omitempty"`
}

func (x *GPUUsage) Reset() {
	*x = GPUUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUUsage) ProtoMessage() {}

func (x *GPUUsage) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUUsage.ProtoReflect.Descriptor instead.
func (*GPUUsage) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{15}
}

func (x *GPUUsage) GetGFXActivity() uint32 {
	if x != nil {
		return x.GFXActivity
	}
	return 0
}

func (x *GPUUsage) GetUMCActivity() uint32 {
	if x != nil {
		return x.UMCActivity
	}
	return 0
}

func (x *GPUUsage) GetMMActivity() uint32 {
	if x != nil {
		return x.MMActivity
	}
	return 0
}

func (x *GPUUsage) GetVCNActivity() []uint32 {
	if x != nil {
		return x.VCNActivity
	}
	return nil
}

func (x *GPUUsage) GetJPEGActivity() []uint32 {
	if x != nil {
		return x.JPEGActivity
	}
	return nil
}

func (x *GPUUsage) GetGFXBusyInst() []uint32 {
	if x != nil {
		return x.GFXBusyInst
	}
	return nil
}

func (x *GPUUsage) GetJPEGBusyInst() []uint32 {
	if x != nil {
		return x.JPEGBusyInst
	}
	return nil
}

func (x *GPUUsage) GetVCNBusyInst() []uint32 {
	if x != nil {
		return x.VCNBusyInst
	}
	return nil
}

// GPU current memory usage
type GPUMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// percentage of available memory in use
	MemoryUsage float32 `protobuf:"fixed32,1,opt,name=MemoryUsage,proto3" json:"MemoryUsage,omitempty"`
	// TODO: describe this field
	Activity float32 `protobuf:"fixed32,2,opt,name=Activity,proto3" json:"Activity,omitempty"`
}

func (x *GPUMemoryUsage) Reset() {
	*x = GPUMemoryUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryUsage) ProtoMessage() {}

func (x *GPUMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryUsage.ProtoReflect.Descriptor instead.
func (*GPUMemoryUsage) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{16}
}

func (x *GPUMemoryUsage) GetMemoryUsage() float32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *GPUMemoryUsage) GetActivity() float32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

// PCIe statistics
type GPUPCIeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total number of the replays issued on the PCIe link
	ReplayCount uint64 `protobuf:"varint,1,opt,name=ReplayCount,proto3" json:"ReplayCount,omitempty"`
	// total number of times the PCIe link transitioned from L0 to the recovery
	// state
	RecoveryCount uint64 `protobuf:"varint,2,opt,name=RecoveryCount,proto3" json:"RecoveryCount,omitempty"`
	// total number of replay rollovers issued on the PCIe link
	ReplayRolloverCount uint64 `protobuf:"varint,3,opt,name=ReplayRolloverCount,proto3" json:"ReplayRolloverCount,omitempty"`
	// total number of NACKs issued on the PCIe link by the device
	NACKSentCount uint64 `protobuf:"varint,4,opt,name=NACKSentCount,proto3" json:"NACKSentCount,omitempty"`
	// total number of NACKs issued on the PCIe link by the receiver
	NACKReceivedCount uint64 `protobuf:"varint,5,opt,name=NACKReceivedCount,proto3" json:"NACKReceivedCount,omitempty"`
	// accumulated bytes received from the PCIe link
	RxBytes uint64 `protobuf:"varint,6,opt,name=RxBytes,proto3" json:"RxBytes,omitempty"`
	// accumulated bytes transmitted to the PCIe link
	TxBytes uint64 `protobuf:"varint,7,opt,name=TxBytes,proto3" json:"TxBytes,omitempty"`
	// bidirectional accumulated bandwidth on PCIe (GB/sec)
	BiDirBandwidth uint64 `protobuf:"varint,8,opt,name=BiDirBandwidth,proto3" json:"BiDirBandwidth,omitempty"`
}

func (x *GPUPCIeStats) Reset() {
	*x = GPUPCIeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUPCIeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUPCIeStats) ProtoMessage() {}

func (x *GPUPCIeStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUPCIeStats.ProtoReflect.Descriptor instead.
func (*GPUPCIeStats) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{17}
}

func (x *GPUPCIeStats) GetReplayCount() uint64 {
	if x != nil {
		return x.ReplayCount
	}
	return 0
}

func (x *GPUPCIeStats) GetRecoveryCount() uint64 {
	if x != nil {
		return x.RecoveryCount
	}
	return 0
}

func (x *GPUPCIeStats) GetReplayRolloverCount() uint64 {
	if x != nil {
		return x.ReplayRolloverCount
	}
	return 0
}

func (x *GPUPCIeStats) GetNACKSentCount() uint64 {
	if x != nil {
		return x.NACKSentCount
	}
	return 0
}

func (x *GPUPCIeStats) GetNACKReceivedCount() uint64 {
	if x != nil {
		return x.NACKReceivedCount
	}
	return 0
}

func (x *GPUPCIeStats) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *GPUPCIeStats) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *GPUPCIeStats) GetBiDirBandwidth() uint64 {
	if x != nil {
		return x.BiDirBandwidth
	}
	return 0
}

// voltage statistics
type GPUVoltage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current voltage (in mV)
	Voltage uint64 `protobuf:"varint,1,opt,name=Voltage,proto3" json:"Voltage,omitempty"`
	// current graphics voltage (in mV)
	GFXVoltage uint64 `protobuf:"varint,2,opt,name=GFXVoltage,proto3" json:"GFXVoltage,omitempty"`
	// current memory voltage (in mV)
	MemoryVoltage uint64 `protobuf:"varint,3,opt,name=MemoryVoltage,proto3" json:"MemoryVoltage,omitempty"`
}

func (x *GPUVoltage) Reset() {
	*x = GPUVoltage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUVoltage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUVoltage) ProtoMessage() {}

func (x *GPUVoltage) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUVoltage.ProtoReflect.Descriptor instead.
func (*GPUVoltage) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{18}
}

func (x *GPUVoltage) GetVoltage() uint64 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *GPUVoltage) GetGFXVoltage() uint64 {
	if x != nil {
		return x.GFXVoltage
	}
	return 0
}

func (x *GPUVoltage) GetMemoryVoltage() uint64 {
	if x != nil {
		return x.MemoryVoltage
	}
	return 0
}

// VRAM usage
type GPUVRAMUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total VRAM (in MB)
	TotalVRAM uint64 `protobuf:"varint,1,opt,name=TotalVRAM,proto3" json:"TotalVRAM,omitempty"`
	// used VRAM (in MB)
	UsedVRAM uint64 `protobuf:"varint,2,opt,name=UsedVRAM,proto3" json:"UsedVRAM,omitempty"`
	// free VRAM (in MB)
	FreeVRAM uint64 `protobuf:"varint,3,opt,name=FreeVRAM,proto3" json:"FreeVRAM,omitempty"`
	// total visible VRAM (in MB)
	TotalVisibleVRAM uint64 `protobuf:"varint,4,opt,name=TotalVisibleVRAM,proto3" json:"TotalVisibleVRAM,omitempty"`
	// used visible VRAM (in MB)
	UsedVisibleVRAM uint64 `protobuf:"varint,5,opt,name=UsedVisibleVRAM,proto3" json:"UsedVisibleVRAM,omitempty"`
	// free visible VRAM (in MB)
	FreeVisibleVRAM uint64 `protobuf:"varint,6,opt,name=FreeVisibleVRAM,proto3" json:"FreeVisibleVRAM,omitempty"`
	// total Graphics Translation Table (GTT) (in MB)
	TotalGTT uint64 `protobuf:"varint,7,opt,name=TotalGTT,proto3" json:"TotalGTT,omitempty"`
	// used GTT (in MB)
	UsedGTT uint64 `protobuf:"varint,8,opt,name=UsedGTT,proto3" json:"UsedGTT,omitempty"`
	// free GTT (in MB)
	FreeGTT uint64 `protobuf:"varint,9,opt,name=FreeGTT,proto3" json:"FreeGTT,omitempty"`
}

func (x *GPUVRAMUsage) Reset() {
	*x = GPUVRAMUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUVRAMUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUVRAMUsage) ProtoMessage() {}

func (x *GPUVRAMUsage) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUVRAMUsage.ProtoReflect.Descriptor instead.
func (*GPUVRAMUsage) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{19}
}

func (x *GPUVRAMUsage) GetTotalVRAM() uint64 {
	if x != nil {
		return x.TotalVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetUsedVRAM() uint64 {
	if x != nil {
		return x.UsedVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetFreeVRAM() uint64 {
	if x != nil {
		return x.FreeVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetTotalVisibleVRAM() uint64 {
	if x != nil {
		return x.TotalVisibleVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetUsedVisibleVRAM() uint64 {
	if x != nil {
		return x.UsedVisibleVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetFreeVisibleVRAM() uint64 {
	if x != nil {
		return x.FreeVisibleVRAM
	}
	return 0
}

func (x *GPUVRAMUsage) GetTotalGTT() uint64 {
	if x != nil {
		return x.TotalGTT
	}
	return 0
}

func (x *GPUVRAMUsage) GetUsedGTT() uint64 {
	if x != nil {
		return x.UsedGTT
	}
	return 0
}

func (x *GPUVRAMUsage) GetFreeGTT() uint64 {
	if x != nil {
		return x.FreeGTT
	}
	return 0
}

// XGMI statistics of GPU
type GPUXGMILinkStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// XGMI data read in KB
	DataRead uint64 `protobuf:"varint,1,opt,name=DataRead,proto3" json:"DataRead,omitempty"`
	// XGMI data written in KB
	DataWrite uint64 `protobuf:"varint,2,opt,name=DataWrite,proto3" json:"DataWrite,omitempty"`
}

func (x *GPUXGMILinkStats) Reset() {
	*x = GPUXGMILinkStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUXGMILinkStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUXGMILinkStats) ProtoMessage() {}

func (x *GPUXGMILinkStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUXGMILinkStats.ProtoReflect.Descriptor instead.
func (*GPUXGMILinkStats) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{20}
}

func (x *GPUXGMILinkStats) GetDataRead() uint64 {
	if x != nil {
		return x.DataRead
	}
	return 0
}

func (x *GPUXGMILinkStats) GetDataWrite() uint64 {
	if x != nil {
		return x.DataWrite
	}
	return 0
}

// GPU violation stats
type GPUViolationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current acummulated counter
	CurrentAccumulatedCounter uint64 `protobuf:"varint,1,opt,name=CurrentAccumulatedCounter,proto3" json:"CurrentAccumulatedCounter,omitempty"`
	// processor hot residency accumulated
	ProcessorHotResidencyAccumulated uint64 `protobuf:"varint,2,opt,name=ProcessorHotResidencyAccumulated,proto3" json:"ProcessorHotResidencyAccumulated,omitempty"`
	// Package Power Tracking (PPT) residency accumulated
	PPTResidencyAccumulated uint64 `protobuf:"varint,3,opt,name=PPTResidencyAccumulated,proto3" json:"PPTResidencyAccumulated,omitempty"`
	// socket thermal residency accumulated
	SocketThermalResidencyAccumulated uint64 `protobuf:"varint,4,opt,name=SocketThermalResidencyAccumulated,proto3" json:"SocketThermalResidencyAccumulated,omitempty"`
	// Voltage Rail (VR) thermal residency accumulated
	VRThermalResidencyAccumulated uint64 `protobuf:"varint,5,opt,name=VRThermalResidencyAccumulated,proto3" json:"VRThermalResidencyAccumulated,omitempty"`
	// High Bandwidth Memory (HBM) thermal residency accumulated
	HBMThermalResidencyAccumulated uint64 `protobuf:"varint,6,opt,name=HBMThermalResidencyAccumulated,proto3" json:"HBMThermalResidencyAccumulated,omitempty"`
}

func (x *GPUViolationStats) Reset() {
	*x = GPUViolationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUViolationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUViolationStats) ProtoMessage() {}

func (x *GPUViolationStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUViolationStats.ProtoReflect.Descriptor instead.
func (*GPUViolationStats) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{21}
}

func (x *GPUViolationStats) GetCurrentAccumulatedCounter() uint64 {
	if x != nil {
		return x.CurrentAccumulatedCounter
	}
	return 0
}

func (x *GPUViolationStats) GetProcessorHotResidencyAccumulated() uint64 {
	if x != nil {
		return x.ProcessorHotResidencyAccumulated
	}
	return 0
}

func (x *GPUViolationStats) GetPPTResidencyAccumulated() uint64 {
	if x != nil {
		return x.PPTResidencyAccumulated
	}
	return 0
}

func (x *GPUViolationStats) GetSocketThermalResidencyAccumulated() uint64 {
	if x != nil {
		return x.SocketThermalResidencyAccumulated
	}
	return 0
}

func (x *GPUViolationStats) GetVRThermalResidencyAccumulated() uint64 {
	if x != nil {
		return x.VRThermalResidencyAccumulated
	}
	return 0
}

func (x *GPUViolationStats) GetHBMThermalResidencyAccumulated() uint64 {
	if x != nil {
		return x.HBMThermalResidencyAccumulated
	}
	return 0
}

// GPU statistics
type GPUStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// current graphics package power (in Watts)
	PackagePower uint64 `protobuf:"varint,1,opt,name=PackagePower,proto3" json:"PackagePower,omitempty"`
	// avg. graphics package power (in Watts)
	AvgPackagePower uint64 `protobuf:"varint,2,opt,name=AvgPackagePower,proto3" json:"AvgPackagePower,omitempty"`
	// current temperature
	Temperature *GPUTemperatureStats `protobuf:"bytes,3,opt,name=Temperature,proto3" json:"Temperature,omitempty"`
	// current GPU usage
	Usage *GPUUsage `protobuf:"bytes,4,opt,name=Usage,proto3" json:"Usage,omitempty"`
	// current voltage in milli volts (mV)
	Voltage *GPUVoltage `protobuf:"bytes,5,opt,name=Voltage,proto3" json:"Voltage,omitempty"`
	// PCIe statistics
	PCIeStats *GPUPCIeStats `protobuf:"bytes,6,opt,name=PCIeStats,proto3" json:"PCIeStats,omitempty"`
	// accumulated energy consumed (in uJ)
	EnergyConsumed float64 `protobuf:"fixed64,7,opt,name=EnergyConsumed,proto3" json:"EnergyConsumed,omitempty"`
	// total correctable errors
	TotalCorrectableErrors uint64 `protobuf:"varint,8,opt,name=TotalCorrectableErrors,proto3" json:"TotalCorrectableErrors,omitempty"`
	// total uncorrectable errors
	TotalUncorrectableErrors uint64 `protobuf:"varint,9,opt,name=TotalUncorrectableErrors,proto3" json:"TotalUncorrectableErrors,omitempty"`
	// SDMA correctable errors
	SDMACorrectableErrors uint64 `protobuf:"varint,10,opt,name=SDMACorrectableErrors,proto3" json:"SDMACorrectableErrors,omitempty"`
	// SDMA uncorrectable errors
	SDMAUncorrectableErrors uint64 `protobuf:"varint,11,opt,name=SDMAUncorrectableErrors,proto3" json:"SDMAUncorrectableErrors,omitempty"`
	// GFX correctable errors
	GFXCorrectableErrors uint64 `protobuf:"varint,12,opt,name=GFXCorrectableErrors,proto3" json:"GFXCorrectableErrors,omitempty"`
	// GFX uncorrectable errors
	GFXUncorrectableErrors uint64 `protobuf:"varint,13,opt,name=GFXUncorrectableErrors,proto3" json:"GFXUncorrectableErrors,omitempty"`
	// MMHUB correctable errors
	MMHUBCorrectableErrors uint64 `protobuf:"varint,14,opt,name=MMHUBCorrectableErrors,proto3" json:"MMHUBCorrectableErrors,omitempty"`
	// MMHUB uncorrectable errors
	MMHUBUncorrectableErrors uint64 `protobuf:"varint,15,opt,name=MMHUBUncorrectableErrors,proto3" json:"MMHUBUncorrectableErrors,omitempty"`
	// ATHUB correctable errors
	ATHUBCorrectableErrors uint64 `protobuf:"varint,16,opt,name=ATHUBCorrectableErrors,proto3" json:"ATHUBCorrectableErrors,omitempty"`
	// ATHUB uncorrectable errors
	ATHUBUncorrectableErrors uint64 `protobuf:"varint,17,opt,name=ATHUBUncorrectableErrors,proto3" json:"ATHUBUncorrectableErrors,omitempty"`
	// BIF correctable errors
	BIFCorrectableErrors uint64 `protobuf:"varint,18,opt,name=BIFCorrectableErrors,proto3" json:"BIFCorrectableErrors,omitempty"`
	// BIF uncorrectable errors
	BIFUncorrectableErrors uint64 `protobuf:"varint,19,opt,name=BIFUncorrectableErrors,proto3" json:"BIFUncorrectableErrors,omitempty"`
	// HDP correctable errors
	HDPCorrectableErrors uint64 `protobuf:"varint,20,opt,name=HDPCorrectableErrors,proto3" json:"HDPCorrectableErrors,omitempty"`
	// HDP uncorrectable errors
	HDPUncorrectableErrors uint64 `protobuf:"varint,21,opt,name=HDPUncorrectableErrors,proto3" json:"HDPUncorrectableErrors,omitempty"`
	// XGMI WAFL correctable errors
	XGMIWAFLCorrectableErrors uint64 `protobuf:"varint,22,opt,name=XGMIWAFLCorrectableErrors,proto3" json:"XGMIWAFLCorrectableErrors,omitempty"`
	// XGMI WAFL uncorrectable errors
	XGMIWAFLUncorrectableErrors uint64 `protobuf:"varint,23,opt,name=XGMIWAFLUncorrectableErrors,proto3" json:"XGMIWAFLUncorrectableErrors,omitempty"`
	// DF correctable errors
	DFCorrectableErrors uint64 `protobuf:"varint,24,opt,name=DFCorrectableErrors,proto3" json:"DFCorrectableErrors,omitempty"`
	// DF uncorrectable errors
	DFUncorrectableErrors uint64 `protobuf:"varint,25,opt,name=DFUncorrectableErrors,proto3" json:"DFUncorrectableErrors,omitempty"`
	// SMN correctable errors
	SMNCorrectableErrors uint64 `protobuf:"varint,26,opt,name=SMNCorrectableErrors,proto3" json:"SMNCorrectableErrors,omitempty"`
	// SMN uncorrectable errors
	SMNUncorrectableErrors uint64 `protobuf:"varint,27,opt,name=SMNUncorrectableErrors,proto3" json:"SMNUncorrectableErrors,omitempty"`
	// SEM correctable errors
	SEMCorrectableErrors uint64 `protobuf:"varint,28,opt,name=SEMCorrectableErrors,proto3" json:"SEMCorrectableErrors,omitempty"`
	// SEM uncorrectable errors
	SEMUncorrectableErrors uint64 `protobuf:"varint,29,opt,name=SEMUncorrectableErrors,proto3" json:"SEMUncorrectableErrors,omitempty"`
	// MP0 correctable errors
	MP0CorrectableErrors uint64 `protobuf:"varint,30,opt,name=MP0CorrectableErrors,proto3" json:"MP0CorrectableErrors,omitempty"`
	// MP0 uncorrectable errors
	MP0UncorrectableErrors uint64 `protobuf:"varint,31,opt,name=MP0UncorrectableErrors,proto3" json:"MP0UncorrectableErrors,omitempty"`
	// MP1 correctable errors
	MP1CorrectableErrors uint64 `protobuf:"varint,32,opt,name=MP1CorrectableErrors,proto3" json:"MP1CorrectableErrors,omitempty"`
	// MP1 uncorrectable errors
	MP1UncorrectableErrors uint64 `protobuf:"varint,33,opt,name=MP1UncorrectableErrors,proto3" json:"MP1UncorrectableErrors,omitempty"`
	// FUSE correctable errors
	FUSECorrectableErrors uint64 `protobuf:"varint,34,opt,name=FUSECorrectableErrors,proto3" json:"FUSECorrectableErrors,omitempty"`
	// FUSE uncorrectable errors
	FUSEUncorrectableErrors uint64 `protobuf:"varint,35,opt,name=FUSEUncorrectableErrors,proto3" json:"FUSEUncorrectableErrors,omitempty"`
	// UMC correctable errors
	UMCCorrectableErrors uint64 `protobuf:"varint,36,opt,name=UMCCorrectableErrors,proto3" json:"UMCCorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	UMCUncorrectableErrors uint64 `protobuf:"varint,37,opt,name=UMCUncorrectableErrors,proto3" json:"UMCUncorrectableErrors,omitempty"`
	// UMC correctable errors
	MCACorrectableErrors uint64 `protobuf:"varint,38,opt,name=MCACorrectableErrors,proto3" json:"MCACorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	MCAUncorrectableErrors uint64 `protobuf:"varint,39,opt,name=MCAUncorrectableErrors,proto3" json:"MCAUncorrectableErrors,omitempty"`
	// UMC correctable errors
	VCNCorrectableErrors uint64 `protobuf:"varint,40,opt,name=VCNCorrectableErrors,proto3" json:"VCNCorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	VCNUncorrectableErrors uint64 `protobuf:"varint,41,opt,name=VCNUncorrectableErrors,proto3" json:"VCNUncorrectableErrors,omitempty"`
	// UMC correctable errors
	JPEGCorrectableErrors uint64 `protobuf:"varint,42,opt,name=JPEGCorrectableErrors,proto3" json:"JPEGCorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	JPEGUncorrectableErrors uint64 `protobuf:"varint,43,opt,name=JPEGUncorrectableErrors,proto3" json:"JPEGUncorrectableErrors,omitempty"`
	// UMC correctable errors
	IHCorrectableErrors uint64 `protobuf:"varint,44,opt,name=IHCorrectableErrors,proto3" json:"IHCorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	IHUncorrectableErrors uint64 `protobuf:"varint,45,opt,name=IHUncorrectableErrors,proto3" json:"IHUncorrectableErrors,omitempty"`
	// UMC correctable errors
	MPIOCorrectableErrors uint64 `protobuf:"varint,46,opt,name=MPIOCorrectableErrors,proto3" json:"MPIOCorrectableErrors,omitempty"`
	// UMC uncorrectable errors
	MPIOUncorrectableErrors uint64 `protobuf:"varint,47,opt,name=MPIOUncorrectableErrors,proto3" json:"MPIOUncorrectableErrors,omitempty"`
	// XGMI counters
	// NOPs sent to neighbor0
	XGMINeighbor0TxNOPs uint64 `protobuf:"varint,48,opt,name=XGMINeighbor0TxNOPs,proto3" json:"XGMINeighbor0TxNOPs,omitempty"`
	// outgoing requests to neighbor0
	XGMINeighbor0TxRequests uint64 `protobuf:"varint,49,opt,name=XGMINeighbor0TxRequests,proto3" json:"XGMINeighbor0TxRequests,omitempty"`
	// outgoing responses to neighbor0
	XGMINeighbor0TxResponses uint64 `protobuf:"varint,50,opt,name=XGMINeighbor0TxResponses,proto3" json:"XGMINeighbor0TxResponses,omitempty"`
	// data beats sent to neighbor0 (each beat = 32 Bytes)
	XGMINeighbor0TXBeats uint64 `protobuf:"varint,51,opt,name=XGMINeighbor0TXBeats,proto3" json:"XGMINeighbor0TXBeats,omitempty"`
	// NOPs sent to neighbor1
	XGMINeighbor1TxNOPs uint64 `protobuf:"varint,52,opt,name=XGMINeighbor1TxNOPs,proto3" json:"XGMINeighbor1TxNOPs,omitempty"`
	// outgoing requests to neighbor1
	XGMINeighbor1TxRequests uint64 `protobuf:"varint,53,opt,name=XGMINeighbor1TxRequests,proto3" json:"XGMINeighbor1TxRequests,omitempty"`
	// outgoing responses to neighbor1
	XGMINeighbor1TxResponses uint64 `protobuf:"varint,54,opt,name=XGMINeighbor1TxResponses,proto3" json:"XGMINeighbor1TxResponses,omitempty"`
	// data beats sent to neighbor1 (each beat = 32 Bytes)
	XGMINeighbor1TXBeats uint64 `protobuf:"varint,55,opt,name=XGMINeighbor1TXBeats,proto3" json:"XGMINeighbor1TXBeats,omitempty"`
	// TODO: are there be above like stats for Neighbors 2,3,4 and 5?
	// transmit throughput to XGMI neighbor 0 (in Bytes per second)
	XGMINeighbor0TxThroughput uint64 `protobuf:"varint,56,opt,name=XGMINeighbor0TxThroughput,proto3" json:"XGMINeighbor0TxThroughput,omitempty"`
	// transmit throughput to XGMI neighbor 1 (in Bytes per second)
	XGMINeighbor1TxThroughput uint64 `protobuf:"varint,57,opt,name=XGMINeighbor1TxThroughput,proto3" json:"XGMINeighbor1TxThroughput,omitempty"`
	// transmit throughput to XGMI neighbor 2 (in Bytes per second)
	XGMINeighbor2TxThroughput uint64 `protobuf:"varint,58,opt,name=XGMINeighbor2TxThroughput,proto3" json:"XGMINeighbor2TxThroughput,omitempty"`
	// transmit throughput to XGMI neighbor 3 (in Bytes per second)
	XGMINeighbor3TxThroughput uint64 `protobuf:"varint,59,opt,name=XGMINeighbor3TxThroughput,proto3" json:"XGMINeighbor3TxThroughput,omitempty"`
	// transmit throughput to XGMI neighbor 4 (in Bytes per second)
	XGMINeighbor4TxThroughput uint64 `protobuf:"varint,60,opt,name=XGMINeighbor4TxThroughput,proto3" json:"XGMINeighbor4TxThroughput,omitempty"`
	// transmit throughput to XGMI neighbor 5 (in Bytes per second)
	XGMINeighbor5TxThroughput uint64 `protobuf:"varint,61,opt,name=XGMINeighbor5TxThroughput,proto3" json:"XGMINeighbor5TxThroughput,omitempty"`
	// power usage (in Watts)
	PowerUsage uint64 `protobuf:"varint,62,opt,name=PowerUsage,proto3" json:"PowerUsage,omitempty"`
	// VRAM usage
	VRAMUsage *GPUVRAMUsage `protobuf:"bytes,63,opt,name=VRAMUsage,proto3" json:"VRAMUsage,omitempty"`
	// current fan speed in RPMs
	FanSpeed uint64 `protobuf:"varint,64,opt,name=FanSpeed,proto3" json:"FanSpeed,omitempty"`
	// graphics activity accumulated in %
	GFXActivityAccumulated uint64 `protobuf:"varint,65,opt,name=GFXActivityAccumulated,proto3" json:"GFXActivityAccumulated,omitempty"`
	// memory activity accumulated in %
	MemoryActivityAccumulated uint64 `protobuf:"varint,66,opt,name=MemoryActivityAccumulated,proto3" json:"MemoryActivityAccumulated,omitempty"`
	// GPU XGMI link statistics
	XGMILinkStats []*GPUXGMILinkStats `protobuf:"bytes,67,rep,name=XGMILinkStats,proto3" json:"XGMILinkStats,omitempty"`
	// GPU violation statistics
	ViolationStats *GPUViolationStats `protobuf:"bytes,68,opt,name=ViolationStats,proto3" json:"ViolationStats,omitempty"`
}

func (x *GPUStats) Reset() {
	*x = GPUStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUStats) ProtoMessage() {}

func (x *GPUStats) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUStats.ProtoReflect.Descriptor instead.
func (*GPUStats) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{22}
}

func (x *GPUStats) GetPackagePower() uint64 {
	if x != nil {
		return x.PackagePower
	}
	return 0
}

func (x *GPUStats) GetAvgPackagePower() uint64 {
	if x != nil {
		return x.AvgPackagePower
	}
	return 0
}

func (x *GPUStats) GetTemperature() *GPUTemperatureStats {
	if x != nil {
		return x.Temperature
	}
	return nil
}

func (x *GPUStats) GetUsage() *GPUUsage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *GPUStats) GetVoltage() *GPUVoltage {
	if x != nil {
		return x.Voltage
	}
	return nil
}

func (x *GPUStats) GetPCIeStats() *GPUPCIeStats {
	if x != nil {
		return x.PCIeStats
	}
	return nil
}

func (x *GPUStats) GetEnergyConsumed() float64 {
	if x != nil {
		return x.EnergyConsumed
	}
	return 0
}

func (x *GPUStats) GetTotalCorrectableErrors() uint64 {
	if x != nil {
		return x.TotalCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetTotalUncorrectableErrors() uint64 {
	if x != nil {
		return x.TotalUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSDMACorrectableErrors() uint64 {
	if x != nil {
		return x.SDMACorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSDMAUncorrectableErrors() uint64 {
	if x != nil {
		return x.SDMAUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetGFXCorrectableErrors() uint64 {
	if x != nil {
		return x.GFXCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetGFXUncorrectableErrors() uint64 {
	if x != nil {
		return x.GFXUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMMHUBCorrectableErrors() uint64 {
	if x != nil {
		return x.MMHUBCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMMHUBUncorrectableErrors() uint64 {
	if x != nil {
		return x.MMHUBUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetATHUBCorrectableErrors() uint64 {
	if x != nil {
		return x.ATHUBCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetATHUBUncorrectableErrors() uint64 {
	if x != nil {
		return x.ATHUBUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetBIFCorrectableErrors() uint64 {
	if x != nil {
		return x.BIFCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetBIFUncorrectableErrors() uint64 {
	if x != nil {
		return x.BIFUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetHDPCorrectableErrors() uint64 {
	if x != nil {
		return x.HDPCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetHDPUncorrectableErrors() uint64 {
	if x != nil {
		return x.HDPUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetXGMIWAFLCorrectableErrors() uint64 {
	if x != nil {
		return x.XGMIWAFLCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetXGMIWAFLUncorrectableErrors() uint64 {
	if x != nil {
		return x.XGMIWAFLUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetDFCorrectableErrors() uint64 {
	if x != nil {
		return x.DFCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetDFUncorrectableErrors() uint64 {
	if x != nil {
		return x.DFUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSMNCorrectableErrors() uint64 {
	if x != nil {
		return x.SMNCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSMNUncorrectableErrors() uint64 {
	if x != nil {
		return x.SMNUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSEMCorrectableErrors() uint64 {
	if x != nil {
		return x.SEMCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetSEMUncorrectableErrors() uint64 {
	if x != nil {
		return x.SEMUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMP0CorrectableErrors() uint64 {
	if x != nil {
		return x.MP0CorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMP0UncorrectableErrors() uint64 {
	if x != nil {
		return x.MP0UncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMP1CorrectableErrors() uint64 {
	if x != nil {
		return x.MP1CorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMP1UncorrectableErrors() uint64 {
	if x != nil {
		return x.MP1UncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetFUSECorrectableErrors() uint64 {
	if x != nil {
		return x.FUSECorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetFUSEUncorrectableErrors() uint64 {
	if x != nil {
		return x.FUSEUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetUMCCorrectableErrors() uint64 {
	if x != nil {
		return x.UMCCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetUMCUncorrectableErrors() uint64 {
	if x != nil {
		return x.UMCUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMCACorrectableErrors() uint64 {
	if x != nil {
		return x.MCACorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMCAUncorrectableErrors() uint64 {
	if x != nil {
		return x.MCAUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetVCNCorrectableErrors() uint64 {
	if x != nil {
		return x.VCNCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetVCNUncorrectableErrors() uint64 {
	if x != nil {
		return x.VCNUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetJPEGCorrectableErrors() uint64 {
	if x != nil {
		return x.JPEGCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetJPEGUncorrectableErrors() uint64 {
	if x != nil {
		return x.JPEGUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetIHCorrectableErrors() uint64 {
	if x != nil {
		return x.IHCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetIHUncorrectableErrors() uint64 {
	if x != nil {
		return x.IHUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMPIOCorrectableErrors() uint64 {
	if x != nil {
		return x.MPIOCorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetMPIOUncorrectableErrors() uint64 {
	if x != nil {
		return x.MPIOUncorrectableErrors
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor0TxNOPs() uint64 {
	if x != nil {
		return x.XGMINeighbor0TxNOPs
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor0TxRequests() uint64 {
	if x != nil {
		return x.XGMINeighbor0TxRequests
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor0TxResponses() uint64 {
	if x != nil {
		return x.XGMINeighbor0TxResponses
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor0TXBeats() uint64 {
	if x != nil {
		return x.XGMINeighbor0TXBeats
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor1TxNOPs() uint64 {
	if x != nil {
		return x.XGMINeighbor1TxNOPs
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor1TxRequests() uint64 {
	if x != nil {
		return x.XGMINeighbor1TxRequests
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor1TxResponses() uint64 {
	if x != nil {
		return x.XGMINeighbor1TxResponses
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor1TXBeats() uint64 {
	if x != nil {
		return x.XGMINeighbor1TXBeats
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor0TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor0TxThroughput
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor1TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor1TxThroughput
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor2TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor2TxThroughput
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor3TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor3TxThroughput
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor4TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor4TxThroughput
	}
	return 0
}

func (x *GPUStats) GetXGMINeighbor5TxThroughput() uint64 {
	if x != nil {
		return x.XGMINeighbor5TxThroughput
	}
	return 0
}

func (x *GPUStats) GetPowerUsage() uint64 {
	if x != nil {
		return x.PowerUsage
	}
	return 0
}

func (x *GPUStats) GetVRAMUsage() *GPUVRAMUsage {
	if x != nil {
		return x.VRAMUsage
	}
	return nil
}

func (x *GPUStats) GetFanSpeed() uint64 {
	if x != nil {
		return x.FanSpeed
	}
	return 0
}

func (x *GPUStats) GetGFXActivityAccumulated() uint64 {
	if x != nil {
		return x.GFXActivityAccumulated
	}
	return 0
}

func (x *GPUStats) GetMemoryActivityAccumulated() uint64 {
	if x != nil {
		return x.MemoryActivityAccumulated
	}
	return 0
}

func (x *GPUStats) GetXGMILinkStats() []*GPUXGMILinkStats {
	if x != nil {
		return x.XGMILinkStats
	}
	return nil
}

func (x *GPUStats) GetViolationStats() *GPUViolationStats {
	if x != nil {
		return x.ViolationStats
	}
	return nil
}

// GPU captures config, operational status and stat of GPU object
type GPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GPU config specification
	Spec *GPUSpec `protobuf:"bytes,1,opt,name=Spec,proto3" json:"Spec,omitempty"`
	// GPU operational status
	Status *GPUStatus `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	// GPU statistics
	Stats *GPUStats `protobuf:"bytes,3,opt,name=Stats,proto3" json:"Stats,omitempty"`
}

func (x *GPU) Reset() {
	*x = GPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPU) ProtoMessage() {}

func (x *GPU) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPU.ProtoReflect.Descriptor instead.
func (*GPU) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{23}
}

func (x *GPU) GetSpec() *GPUSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GPU) GetStatus() *GPUStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GPU) GetStats() *GPUStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// GPU get request message
type GPUGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GPUGetRequest) Reset() {
	*x = GPUGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUGetRequest) ProtoMessage() {}

func (x *GPUGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUGetRequest.ProtoReflect.Descriptor instead.
func (*GPUGetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{24}
}

func (x *GPUGetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// response to GPU get request
type GPUGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
	// list of per GPU information
	Response []*GPU `protobuf:"bytes,3,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GPUGetResponse) Reset() {
	*x = GPUGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUGetResponse) ProtoMessage() {}

func (x *GPUGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUGetResponse.ProtoReflect.Descriptor instead.
func (*GPUGetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{25}
}

func (x *GPUGetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUGetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

func (x *GPUGetResponse) GetResponse() []*GPU {
	if x != nil {
		return x.Response
	}
	return nil
}

// GPU update request message
type GPUUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of config specs to update the GPUs to
	Spec []*GPUSpec `protobuf:"bytes,1,rep,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *GPUUpdateRequest) Reset() {
	*x = GPUUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUUpdateRequest) ProtoMessage() {}

func (x *GPUUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUUpdateRequest.ProtoReflect.Descriptor instead.
func (*GPUUpdateRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{26}
}

func (x *GPUUpdateRequest) GetSpec() []*GPUSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// GPU update response message
type GPUUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GPUUpdateResponse) Reset() {
	*x = GPUUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUUpdateResponse) ProtoMessage() {}

func (x *GPUUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUUpdateResponse.ProtoReflect.Descriptor instead.
func (*GPUUpdateResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{27}
}

func (x *GPUUpdateResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUUpdateResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

// GPU reset request message
type GPUResetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	// reset information
	// NOTE:
	// one of the following options must be provided, GPU device
	// reset is not supported yet
	//
	// Types that are assignable to Reset_:
	//
	//	*GPUResetRequest_ResetClocks
	//	*GPUResetRequest_ResetFans
	//	*GPUResetRequest_ResetPowerProfile
	//	*GPUResetRequest_ResetPowerOverDrive
	//	*GPUResetRequest_ResetXGMIError
	//	*GPUResetRequest_ResetPerfDeterminism
	//	*GPUResetRequest_ResetComputePartition
	//	*GPUResetRequest_ResetNPSMode
	Reset_ isGPUResetRequest_Reset_ `protobuf_oneof:"reset"`
}

func (x *GPUResetRequest) Reset() {
	*x = GPUResetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUResetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUResetRequest) ProtoMessage() {}

func (x *GPUResetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUResetRequest.ProtoReflect.Descriptor instead.
func (*GPUResetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{28}
}

func (x *GPUResetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (m *GPUResetRequest) GetReset_() isGPUResetRequest_Reset_ {
	if m != nil {
		return m.Reset_
	}
	return nil
}

func (x *GPUResetRequest) GetResetClocks() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetClocks); ok {
		return x.ResetClocks
	}
	return false
}

func (x *GPUResetRequest) GetResetFans() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetFans); ok {
		return x.ResetFans
	}
	return false
}

func (x *GPUResetRequest) GetResetPowerProfile() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetPowerProfile); ok {
		return x.ResetPowerProfile
	}
	return false
}

func (x *GPUResetRequest) GetResetPowerOverDrive() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetPowerOverDrive); ok {
		return x.ResetPowerOverDrive
	}
	return false
}

func (x *GPUResetRequest) GetResetXGMIError() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetXGMIError); ok {
		return x.ResetXGMIError
	}
	return false
}

func (x *GPUResetRequest) GetResetPerfDeterminism() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetPerfDeterminism); ok {
		return x.ResetPerfDeterminism
	}
	return false
}

func (x *GPUResetRequest) GetResetComputePartition() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetComputePartition); ok {
		return x.ResetComputePartition
	}
	return false
}

func (x *GPUResetRequest) GetResetNPSMode() bool {
	if x, ok := x.GetReset_().(*GPUResetRequest_ResetNPSMode); ok {
		return x.ResetNPSMode
	}
	return false
}

type isGPUResetRequest_Reset_ interface {
	isGPUResetRequest_Reset_()
}

type GPUResetRequest_ResetClocks struct {
	// reset clocks and overdrive to default
	ResetClocks bool `protobuf:"varint,2,opt,name=ResetClocks,proto3,oneof"`
}

type GPUResetRequest_ResetFans struct {
	// reset fans to automatic control
	ResetFans bool `protobuf:"varint,3,opt,name=ResetFans,proto3,oneof"`
}

type GPUResetRequest_ResetPowerProfile struct {
	// reset power profile to default
	ResetPowerProfile bool `protobuf:"varint,4,opt,name=ResetPowerProfile,proto3,oneof"`
}

type GPUResetRequest_ResetPowerOverDrive struct {
	// set the maximum GPU power back to the device deafult state
	ResetPowerOverDrive bool `protobuf:"varint,5,opt,name=ResetPowerOverDrive,proto3,oneof"`
}

type GPUResetRequest_ResetXGMIError struct {
	// reset XGMI error status/count
	ResetXGMIError bool `protobuf:"varint,6,opt,name=ResetXGMIError,proto3,oneof"`
}

type GPUResetRequest_ResetPerfDeterminism struct {
	// disable performance determinism
	ResetPerfDeterminism bool `protobuf:"varint,7,opt,name=ResetPerfDeterminism,proto3,oneof"`
}

type GPUResetRequest_ResetComputePartition struct {
	// resets to boot compute partition state
	ResetComputePartition bool `protobuf:"varint,8,opt,name=ResetComputePartition,proto3,oneof"`
}

type GPUResetRequest_ResetNPSMode struct {
	// reset to boot NPS mode state
	ResetNPSMode bool `protobuf:"varint,9,opt,name=ResetNPSMode,proto3,oneof"`
}

func (*GPUResetRequest_ResetClocks) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetFans) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetPowerProfile) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetPowerOverDrive) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetXGMIError) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetPerfDeterminism) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetComputePartition) isGPUResetRequest_Reset_() {}

func (*GPUResetRequest_ResetNPSMode) isGPUResetRequest_Reset_() {}

// GPU reset response message
type GPUResetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GPUResetResponse) Reset() {
	*x = GPUResetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUResetResponse) ProtoMessage() {}

func (x *GPUResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUResetResponse.ProtoReflect.Descriptor instead.
func (*GPUResetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{29}
}

func (x *GPUResetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUResetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

// GPU compute partition create/update request
type GPUComputePartitionSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	// compute partitioning type to create or updated to
	PartitionType GPUComputePartitionType `protobuf:"varint,2,opt,name=PartitionType,proto3,enum=amdgpu.GPUComputePartitionType" json:"PartitionType,omitempty"`
}

func (x *GPUComputePartitionSetRequest) Reset() {
	*x = GPUComputePartitionSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUComputePartitionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputePartitionSetRequest) ProtoMessage() {}

func (x *GPUComputePartitionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputePartitionSetRequest.ProtoReflect.Descriptor instead.
func (*GPUComputePartitionSetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{30}
}

func (x *GPUComputePartitionSetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GPUComputePartitionSetRequest) GetPartitionType() GPUComputePartitionType {
	if x != nil {
		return x.PartitionType
	}
	return GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_NONE
}

// GPU compute partition create/update response
type GPUComputePartitionSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GPUComputePartitionSetResponse) Reset() {
	*x = GPUComputePartitionSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUComputePartitionSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputePartitionSetResponse) ProtoMessage() {}

func (x *GPUComputePartitionSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputePartitionSetResponse.ProtoReflect.Descriptor instead.
func (*GPUComputePartitionSetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{31}
}

func (x *GPUComputePartitionSetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUComputePartitionSetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

// GPU compute partition GET request
type GPUComputePartitionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of physical GPU uuids which have been partitioned
	// NOTE:
	// if a child GPU or non-partitoned GPU uuid is specified, rpc will return
	// error code suggesting entry not found
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GPUComputePartitionGetRequest) Reset() {
	*x = GPUComputePartitionGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUComputePartitionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputePartitionGetRequest) ProtoMessage() {}

func (x *GPUComputePartitionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputePartitionGetRequest.ProtoReflect.Descriptor instead.
func (*GPUComputePartitionGetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{32}
}

func (x *GPUComputePartitionGetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// GPU compute partition information
type GPUComputePartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// physical GPU uuid
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// compute partition type
	PartitionType GPUComputePartitionType `protobuf:"varint,2,opt,name=PartitionType,proto3,enum=amdgpu.GPUComputePartitionType" json:"PartitionType,omitempty"`
	// partitioned GPUs
	GPUPartition [][]byte `protobuf:"bytes,3,rep,name=GPUPartition,proto3" json:"GPUPartition,omitempty"`
}

func (x *GPUComputePartition) Reset() {
	*x = GPUComputePartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUComputePartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputePartition) ProtoMessage() {}

func (x *GPUComputePartition) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputePartition.ProtoReflect.Descriptor instead.
func (*GPUComputePartition) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{33}
}

func (x *GPUComputePartition) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GPUComputePartition) GetPartitionType() GPUComputePartitionType {
	if x != nil {
		return x.PartitionType
	}
	return GPUComputePartitionType_GPU_COMPUTE_PARTITION_TYPE_NONE
}

func (x *GPUComputePartition) GetGPUPartition() [][]byte {
	if x != nil {
		return x.GPUPartition
	}
	return nil
}

// response to GPU compute partition GET request
type GPUComputePartitionGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
	// list of per GPU information
	Response []*GPUComputePartition `protobuf:"bytes,3,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GPUComputePartitionGetResponse) Reset() {
	*x = GPUComputePartitionGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUComputePartitionGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUComputePartitionGetResponse) ProtoMessage() {}

func (x *GPUComputePartitionGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUComputePartitionGetResponse.ProtoReflect.Descriptor instead.
func (*GPUComputePartitionGetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{34}
}

func (x *GPUComputePartitionGetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUComputePartitionGetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

func (x *GPUComputePartitionGetResponse) GetResponse() []*GPUComputePartition {
	if x != nil {
		return x.Response
	}
	return nil
}

// GPU memory partition create/update request
type GPUMemoryPartitionSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
	// memory partitioning type to create or updated to
	PartitionType GPUMemoryPartitionType `protobuf:"varint,2,opt,name=PartitionType,proto3,enum=amdgpu.GPUMemoryPartitionType" json:"PartitionType,omitempty"`
}

func (x *GPUMemoryPartitionSetRequest) Reset() {
	*x = GPUMemoryPartitionSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryPartitionSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryPartitionSetRequest) ProtoMessage() {}

func (x *GPUMemoryPartitionSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryPartitionSetRequest.ProtoReflect.Descriptor instead.
func (*GPUMemoryPartitionSetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{35}
}

func (x *GPUMemoryPartitionSetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GPUMemoryPartitionSetRequest) GetPartitionType() GPUMemoryPartitionType {
	if x != nil {
		return x.PartitionType
	}
	return GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NONE
}

// GPU memory partition create/update response
type GPUMemoryPartitionSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
}

func (x *GPUMemoryPartitionSetResponse) Reset() {
	*x = GPUMemoryPartitionSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryPartitionSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryPartitionSetResponse) ProtoMessage() {}

func (x *GPUMemoryPartitionSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryPartitionSetResponse.ProtoReflect.Descriptor instead.
func (*GPUMemoryPartitionSetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{36}
}

func (x *GPUMemoryPartitionSetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUMemoryPartitionSetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

// GPU memory partition GET request
type GPUMemoryPartitionGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of GPU uuids
	Id [][]byte `protobuf:"bytes,1,rep,name=Id,proto3" json:"Id,omitempty"`
}

func (x *GPUMemoryPartitionGetRequest) Reset() {
	*x = GPUMemoryPartitionGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryPartitionGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryPartitionGetRequest) ProtoMessage() {}

func (x *GPUMemoryPartitionGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryPartitionGetRequest.ProtoReflect.Descriptor instead.
func (*GPUMemoryPartitionGetRequest) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{37}
}

func (x *GPUMemoryPartitionGetRequest) GetId() [][]byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// GPU memory partition information
type GPUMemoryPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GPU uuid
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	// memory partition type
	PartitionType GPUMemoryPartitionType `protobuf:"varint,2,opt,name=PartitionType,proto3,enum=amdgpu.GPUMemoryPartitionType" json:"PartitionType,omitempty"`
}

func (x *GPUMemoryPartition) Reset() {
	*x = GPUMemoryPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryPartition) ProtoMessage() {}

func (x *GPUMemoryPartition) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryPartition.ProtoReflect.Descriptor instead.
func (*GPUMemoryPartition) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{38}
}

func (x *GPUMemoryPartition) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GPUMemoryPartition) GetPartitionType() GPUMemoryPartitionType {
	if x != nil {
		return x.PartitionType
	}
	return GPUMemoryPartitionType_GPU_MEMORY_PARTITION_TYPE_NONE
}

// response to GPU memory partition GET request
type GPUMemoryPartitionGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result of the API processing
	ApiStatus ApiStatus `protobuf:"varint,1,opt,name=ApiStatus,proto3,enum=types.ApiStatus" json:"ApiStatus,omitempty"`
	// specific error code, if any
	ErrorCode ErrorCode `protobuf:"varint,2,opt,name=ErrorCode,proto3,enum=types.ErrorCode" json:"ErrorCode,omitempty"`
	// list of per GPU information
	Response []*GPUMemoryPartition `protobuf:"bytes,3,rep,name=Response,proto3" json:"Response,omitempty"`
}

func (x *GPUMemoryPartitionGetResponse) Reset() {
	*x = GPUMemoryPartitionGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gpu_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMemoryPartitionGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMemoryPartitionGetResponse) ProtoMessage() {}

func (x *GPUMemoryPartitionGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gpu_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMemoryPartitionGetResponse.ProtoReflect.Descriptor instead.
func (*GPUMemoryPartitionGetResponse) Descriptor() ([]byte, []int) {
	return file_gpu_proto_rawDescGZIP(), []int{39}
}

func (x *GPUMemoryPartitionGetResponse) GetApiStatus() ApiStatus {
	if x != nil {
		return x.ApiStatus
	}
	return ApiStatus_API_STATUS_OK
}

func (x *GPUMemoryPartitionGetResponse) GetErrorCode() ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return ErrorCode_ERR_CODE_NONE
}

func (x *GPUMemoryPartitionGetResponse) GetResponse() []*GPUMemoryPartition {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_gpu_proto protoreflect.FileDescriptor

var file_gpu_proto_rawDesc = []byte{
	0x0a, 0x09, 0x67, 0x70, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x96, 0x01, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x46, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x0c, 0x0a, 0x0a, 0x47, 0x50, 0x55,
	0x52, 0x41, 0x53, 0x53, 0x70, 0x65, 0x63, 0x22, 0x9c, 0x04, 0x0a, 0x07, 0x47, 0x50, 0x55, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75,
	0x2e, 0x47, 0x50, 0x55, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x76,
	0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x61,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x47, 0x50, 0x55, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a,
	0x0e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47,
	0x50, 0x55, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x07, 0x52, 0x41, 0x53, 0x53, 0x70, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x52,
	0x41, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x52, 0x41, 0x53, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x53, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x58, 0x47, 0x4d,
	0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x58, 0x47, 0x4d, 0x49, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0e, 0x47, 0x50, 0x55, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x48, 0x69, 0x67, 0x68, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x44, 0x65, 0x65, 0x70, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x22, 0x64, 0x0a, 0x14,
	0x47, 0x50, 0x55, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x43, 0x75, 0x72, 0x76, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x46,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x52, 0x41, 0x53, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xfb,
	0x01, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x08, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x50, 0x43, 0x49, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x43, 0x49, 0x65, 0x42, 0x75, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x43, 0x49, 0x65, 0x42, 0x75, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x61, 0x0a, 0x0d,
	0x47, 0x50, 0x55, 0x56, 0x52, 0x41, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x56, 0x52, 0x41, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x47, 0x50, 0x55, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x61, 0x67, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70,
	0x75, 0x2e, 0x47, 0x50, 0x55, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0a, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47,
	0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x02, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0xe2, 0x08, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x47, 0x50, 0x55, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x61, 0x72, 0x64, 0x53, 0x4b, 0x55, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x4b, 0x55, 0x12, 0x35, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x42, 0x49, 0x4f, 0x53, 0x50, 0x61, 0x72,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56,
	0x42, 0x49, 0x4f, 0x53, 0x50, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x56, 0x42, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x42, 0x49, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x0b,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x43, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4b, 0x46, 0x44, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x4b, 0x46,
	0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x52, 0x41,
	0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x41, 0x53, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x52, 0x41, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x0a, 0x58, 0x47, 0x4d, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x58,
	0x47, 0x4d, 0x49, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x58, 0x47, 0x4d, 0x49, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x56, 0x52, 0x41, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67,
	0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x56, 0x52, 0x41, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x56, 0x52, 0x41, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0a,
	0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x50, 0x43, 0x49,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x57, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x46, 0x57, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x47, 0x50, 0x55, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x47, 0x50, 0x55, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x47, 0x50, 0x55, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x46, 0x44, 0x49, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4b, 0x46, 0x44, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x52, 0x4d, 0x52, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x44, 0x52, 0x4d, 0x52, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x52, 0x4d, 0x43, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x52, 0x4d, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x45, 0x64, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x4a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x48, 0x42, 0x4d, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e,
	0x48, 0x42, 0x4d, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x9c,
	0x02, 0x0a, 0x08, 0x47, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x47,
	0x46, 0x58, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x47, 0x46, 0x58, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a,
	0x0b, 0x55, 0x4d, 0x43, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x55, 0x4d, 0x43, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x4d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x4d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x56, 0x43, 0x4e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x56, 0x43, 0x4e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x50, 0x45, 0x47, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x4a, 0x50, 0x45, 0x47, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x46, 0x58, 0x42, 0x75, 0x73, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x46, 0x58, 0x42,
	0x75, 0x73, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x50, 0x45, 0x47, 0x42,
	0x75, 0x73, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x4a,
	0x50, 0x45, 0x47, 0x42, 0x75, 0x73, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56,
	0x43, 0x4e, 0x42, 0x75, 0x73, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0b, 0x56, 0x43, 0x4e, 0x42, 0x75, 0x73, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x22, 0x4e, 0x0a,
	0x0e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xb8, 0x02,
	0x0a, 0x0c, 0x47, 0x50, 0x55, 0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x41, 0x43, 0x4b,
	0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x4e, 0x41, 0x43, 0x4b, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x4e, 0x41, 0x43, 0x4b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x4e, 0x41, 0x43, 0x4b, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x52,
	0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x69, 0x44, 0x69, 0x72, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x42, 0x69, 0x44, 0x69, 0x72, 0x42,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0x6c, 0x0a, 0x0a, 0x47, 0x50, 0x55, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x46, 0x58, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x47, 0x46, 0x58, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb4, 0x02, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x56, 0x52,
	0x41, 0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x52, 0x41, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x64, 0x56, 0x52, 0x41,
	0x4d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x55, 0x73, 0x65, 0x64, 0x56, 0x52, 0x41,
	0x4d, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x2a, 0x0a,
	0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x52, 0x41,
	0x4d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56,
	0x52, 0x41, 0x4d, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x72, 0x65, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x46, 0x72,
	0x65, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x56, 0x52, 0x41, 0x4d, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x54, 0x54, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x54, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x64, 0x47, 0x54, 0x54, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x55, 0x73, 0x65, 0x64,
	0x47, 0x54, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65, 0x47, 0x54, 0x54, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x46, 0x72, 0x65, 0x65, 0x47, 0x54, 0x54, 0x22, 0x4c, 0x0a,
	0x10, 0x47, 0x50, 0x55, 0x58, 0x47, 0x4d, 0x49, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x11,
	0x47, 0x50, 0x55, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x48, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x20, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x48, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x50,
	0x50, 0x54, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x50, 0x50,
	0x54, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41,
	0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x21, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1d, 0x56, 0x52, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x56, 0x52, 0x54, 0x68,
	0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63,
	0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x1e, 0x48, 0x42, 0x4d,
	0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1e, 0x48, 0x42, 0x4d, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x82, 0x1d, 0x0a, 0x08, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x76, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x41, 0x76, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50,
	0x55, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50,
	0x55, 0x50, 0x43, 0x49, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x09, 0x50, 0x43, 0x49, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x44, 0x4d, 0x41, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x53, 0x44, 0x4d, 0x41, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x44, 0x4d, 0x41, 0x55,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x53, 0x44, 0x4d, 0x41, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x47, 0x46, 0x58, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x47, 0x46, 0x58, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x46, 0x58, 0x55, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x47, 0x46, 0x58, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x4d,
	0x4d, 0x48, 0x55, 0x42, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x4d, 0x4d, 0x48, 0x55, 0x42, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x41, 0x54, 0x48, 0x55, 0x42, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x41, 0x54, 0x48, 0x55, 0x42, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x54, 0x48,
	0x55, 0x42, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x41, 0x54, 0x48,
	0x55, 0x42, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x49, 0x46, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x42, 0x49, 0x46, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x49, 0x46,
	0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x42, 0x49, 0x46, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x44, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x48, 0x44, 0x50, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x48, 0x44, 0x50, 0x55, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x48, 0x44, 0x50, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x58, 0x47, 0x4d, 0x49, 0x57, 0x41, 0x46, 0x4c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x57, 0x41, 0x46, 0x4c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x58,
	0x47, 0x4d, 0x49, 0x57, 0x41, 0x46, 0x4c, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1b, 0x58, 0x47, 0x4d, 0x49, 0x57, 0x41, 0x46, 0x4c, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x44, 0x46, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x44, 0x46, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x44, 0x46, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x44, 0x46, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x4d, 0x4e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x53, 0x4d, 0x4e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x4d, 0x4e,
	0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x53, 0x4d, 0x4e, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x45, 0x4d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x53, 0x45, 0x4d, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x45, 0x4d, 0x55, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x53, 0x45, 0x4d, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x4d, 0x50, 0x30, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x4d, 0x50, 0x30,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x50, 0x30, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x4d, 0x50, 0x30, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x50, 0x31,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x4d, 0x50, 0x31, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x16, 0x4d, 0x50, 0x31, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x4d,
	0x50, 0x31, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x55, 0x53, 0x45, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x46, 0x55, 0x53, 0x45, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x46,
	0x55, 0x53, 0x45, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x46, 0x55,
	0x53, 0x45, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x4d, 0x43, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x55, 0x4d, 0x43, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x55, 0x4d, 0x43,
	0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x55, 0x4d, 0x43, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x43, 0x41, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x14, 0x4d, 0x43, 0x41, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x43, 0x41, 0x55, 0x6e, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x4d, 0x43, 0x41, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x56, 0x43, 0x4e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x56, 0x43, 0x4e,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x43, 0x4e, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x16, 0x56, 0x43, 0x4e, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x4a, 0x50, 0x45,
	0x47, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4a, 0x50, 0x45, 0x47, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x4a, 0x50, 0x45, 0x47, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x4a, 0x50, 0x45, 0x47, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x48, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x49, 0x48, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x49,
	0x48, 0x55, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x49, 0x48, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x4d, 0x50, 0x49, 0x4f, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x50, 0x49, 0x4f, 0x55,
	0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x4d, 0x50, 0x49, 0x4f, 0x55, 0x6e,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x30, 0x54, 0x78, 0x4e, 0x4f, 0x50, 0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x78, 0x4e,
	0x4f, 0x50, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x30, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x30, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a,
	0x18, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x18, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x58, 0x47, 0x4d,
	0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x58, 0x42, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x58, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78,
	0x4e, 0x4f, 0x50, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x58, 0x47, 0x4d, 0x49,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78, 0x4e, 0x4f, 0x50, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31,
	0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54,
	0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x58, 0x47, 0x4d,
	0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x58, 0x47, 0x4d,
	0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x58, 0x42, 0x65, 0x61, 0x74, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x31, 0x54, 0x58, 0x42, 0x65, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d,
	0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x58, 0x47,
	0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x30, 0x54, 0x78, 0x54, 0x68, 0x72,
	0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x70, 0x75, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x58, 0x47, 0x4d, 0x49,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x31, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x32, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70,
	0x75, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x32, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x33, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x33, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x34, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x34, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x35,
	0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x19, 0x58, 0x47, 0x4d, 0x49, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x35, 0x54, 0x78, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a,
	0x09, 0x56, 0x52, 0x41, 0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x56, 0x52, 0x41,
	0x4d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x09, 0x56, 0x52, 0x41, 0x4d, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x47, 0x46, 0x58, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x47,
	0x46, 0x58, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x58, 0x47, 0x4d, 0x49, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x58, 0x47, 0x4d, 0x49, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x58, 0x47, 0x4d, 0x49, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7d, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x12, 0x23, 0x0a,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x29, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x47, 0x50, 0x55, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x37, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50,
	0x55, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x22, 0x73, 0x0a, 0x11, 0x47,
	0x50, 0x55, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x90, 0x03, 0x0a, 0x0f, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x46, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x13, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x58, 0x47, 0x4d, 0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x58, 0x47, 0x4d,
	0x49, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x66, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x66, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x36, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x15, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x50, 0x53,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4e, 0x50, 0x53, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x10, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x1d, 0x47, 0x50, 0x55, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x2f, 0x0a, 0x1d, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x02, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x50, 0x55, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x47, 0x50, 0x55, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x6d,
	0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x74, 0x0a, 0x1c, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x64, 0x67,
	0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x1d, 0x47, 0x50, 0x55, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x47, 0x50, 0x55,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x12, 0x47, 0x50, 0x55,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e,
	0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x41, 0x70,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x6d, 0x64, 0x67,
	0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0x5b, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50,
	0x55, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0xf4, 0x01, 0x0a,
	0x0c, 0x47, 0x50, 0x55, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x43,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x10, 0x04, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x43, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x43,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x45, 0x10, 0x06,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50,
	0x55, 0x5f, 0x43, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0x08, 0x2a, 0xfd, 0x01, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x47,
	0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x4c, 0x4f, 0x57, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52,
	0x46, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x20,
	0x0a, 0x1c, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x44, 0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x04,
	0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4d, 0x43,
	0x4c, 0x4b, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x45, 0x52, 0x46,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x49,
	0x4e, 0x5f, 0x53, 0x43, 0x4c, 0x4b, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x5f,
	0x50, 0x45, 0x52, 0x46, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x07, 0x2a, 0xf2, 0x01, 0x0a, 0x17, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x1f, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x50, 0x58, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x50, 0x58, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x50, 0x58, 0x10, 0x03,
	0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51,
	0x50, 0x58, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x55, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x50, 0x58, 0x10, 0x05, 0x2a, 0xcc, 0x01, 0x0a, 0x16, 0x47, 0x50, 0x55,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x53, 0x31, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x47,
	0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x53, 0x32, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x50, 0x53,
	0x34, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x50, 0x53, 0x38, 0x10, 0x04, 0x2a, 0x5b, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x4f, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50,
	0x55, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x12, 0x47, 0x50, 0x55, 0x58, 0x47, 0x4d, 0x49,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47,
	0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d,
	0x49, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x47, 0x50, 0x55, 0x5f, 0x58, 0x47, 0x4d, 0x49, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x8c, 0x01, 0x0a, 0x0c, 0x50, 0x43, 0x49, 0x65, 0x53,
	0x6c, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x43, 0x49, 0x45, 0x5f,
	0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x43, 0x49, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x43, 0x49,
	0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x41, 0x4d, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x43, 0x49, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x43, 0x49,
	0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x04, 0x2a, 0xd4, 0x02, 0x0a, 0x08, 0x56, 0x52, 0x41, 0x4d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x42, 0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x52, 0x41,
	0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x42, 0x4d, 0x32, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x42, 0x4d, 0x32, 0x45,
	0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x42, 0x4d, 0x33, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x44, 0x52, 0x32, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x52,
	0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x44, 0x52, 0x33, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x44, 0x52, 0x34,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x47, 0x44, 0x44, 0x52, 0x31, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x44, 0x44, 0x52, 0x32, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f,
	0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x44, 0x44, 0x52, 0x33, 0x10,
	0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47,
	0x44, 0x44, 0x52, 0x34, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x44, 0x44, 0x52, 0x35, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x44, 0x44, 0x52, 0x36, 0x10, 0x0d,
	0x12, 0x13, 0x0a, 0x0f, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x44,
	0x44, 0x52, 0x37, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0f, 0x2a, 0x72, 0x0a, 0x13,
	0x47, 0x50, 0x55, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54,
	0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54,
	0x54, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x10, 0x02,
	0x2a, 0x86, 0x01, 0x0a, 0x0d, 0x47, 0x50, 0x55, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x50, 0x55, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x50,
	0x55, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x50, 0x55, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x53,
	0x45, 0x52, 0x56, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x32, 0xee, 0x04, 0x0a, 0x06, 0x47, 0x50,
	0x55, 0x53, 0x76, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x47, 0x50, 0x55, 0x47, 0x65, 0x74, 0x12, 0x15,
	0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47,
	0x50, 0x55, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x61,
	0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e,
	0x47, 0x50, 0x55, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x16, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50,
	0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x16, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70,
	0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x50, 0x55,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70,
	0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x15, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x50, 0x55,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47,
	0x50, 0x55, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5f, 0x0a, 0x0b, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x47, 0x50, 0x55, 0x53, 0x76, 0x63, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x50, 0x55,
	0x42, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x6d, 0x64,
	0x67, 0x70, 0x75, 0x2e, 0x47, 0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x6d, 0x64, 0x67, 0x70,
	0x75, 0x2e, 0x47, 0x50, 0x55, 0x42, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0c, 0x5a, 0x0a, 0x67,
	0x65, 0x6e, 0x2f, 0x61, 0x6d, 0x64, 0x67, 0x70, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gpu_proto_rawDescOnce sync.Once
	file_gpu_proto_rawDescData = file_gpu_proto_rawDesc
)

func file_gpu_proto_rawDescGZIP() []byte {
	file_gpu_proto_rawDescOnce.Do(func() {
		file_gpu_proto_rawDescData = protoimpl.X.CompressGZIP(file_gpu_proto_rawDescData)
	})
	return file_gpu_proto_rawDescData
}

var file_gpu_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_gpu_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_gpu_proto_goTypes = []any{
	(GPUAdminState)(0),                     // 0: amdgpu.GPUAdminState
	(GPUClockType)(0),                      // 1: amdgpu.GPUClockType
	(GPUPerformanceLevel)(0),               // 2: amdgpu.GPUPerformanceLevel
	(GPUComputePartitionType)(0),           // 3: amdgpu.GPUComputePartitionType
	(GPUMemoryPartitionType)(0),            // 4: amdgpu.GPUMemoryPartitionType
	(GPUOperStatus)(0),                     // 5: amdgpu.GPUOperStatus
	(GPUXGMIErrorStatus)(0),                // 6: amdgpu.GPUXGMIErrorStatus
	(PCIeSlotType)(0),                      // 7: amdgpu.PCIeSlotType
	(VRAMType)(0),                          // 8: amdgpu.VRAMType
	(GPUThrottlingStatus)(0),               // 9: amdgpu.GPUThrottlingStatus
	(GPUPageStatus)(0),                     // 10: amdgpu.GPUPageStatus
	(*GPUClockFrequencyRange)(nil),         // 11: amdgpu.GPUClockFrequencyRange
	(*GPURASSpec)(nil),                     // 12: amdgpu.GPURASSpec
	(*GPUSpec)(nil),                        // 13: amdgpu.GPUSpec
	(*GPUXGMIStatus)(nil),                  // 14: amdgpu.GPUXGMIStatus
	(*GPUClockStatus)(nil),                 // 15: amdgpu.GPUClockStatus
	(*GPUVoltageCurvePoint)(nil),           // 16: amdgpu.GPUVoltageCurvePoint
	(*GPURASStatus)(nil),                   // 17: amdgpu.GPURASStatus
	(*GPUFirmwareVersion)(nil),             // 18: amdgpu.GPUFirmwareVersion
	(*GPUPCIeStatus)(nil),                  // 19: amdgpu.GPUPCIeStatus
	(*GPUVRAMStatus)(nil),                  // 20: amdgpu.GPUVRAMStatus
	(*GPUBadPageRecord)(nil),               // 21: amdgpu.GPUBadPageRecord
	(*GPUBadPageGetRequest)(nil),           // 22: amdgpu.GPUBadPageGetRequest
	(*GPUBadPageGetResponse)(nil),          // 23: amdgpu.GPUBadPageGetResponse
	(*GPUStatus)(nil),                      // 24: amdgpu.GPUStatus
	(*GPUTemperatureStats)(nil),            // 25: amdgpu.GPUTemperatureStats
	(*GPUUsage)(nil),                       // 26: amdgpu.GPUUsage
	(*GPUMemoryUsage)(nil),                 // 27: amdgpu.GPUMemoryUsage
	(*GPUPCIeStats)(nil),                   // 28: amdgpu.GPUPCIeStats
	(*GPUVoltage)(nil),                     // 29: amdgpu.GPUVoltage
	(*GPUVRAMUsage)(nil),                   // 30: amdgpu.GPUVRAMUsage
	(*GPUXGMILinkStats)(nil),               // 31: amdgpu.GPUXGMILinkStats
	(*GPUViolationStats)(nil),              // 32: amdgpu.GPUViolationStats
	(*GPUStats)(nil),                       // 33: amdgpu.GPUStats
	(*GPU)(nil),                            // 34: amdgpu.GPU
	(*GPUGetRequest)(nil),                  // 35: amdgpu.GPUGetRequest
	(*GPUGetResponse)(nil),                 // 36: amdgpu.GPUGetResponse
	(*GPUUpdateRequest)(nil),               // 37: amdgpu.GPUUpdateRequest
	(*GPUUpdateResponse)(nil),              // 38: amdgpu.GPUUpdateResponse
	(*GPUResetRequest)(nil),                // 39: amdgpu.GPUResetRequest
	(*GPUResetResponse)(nil),               // 40: amdgpu.GPUResetResponse
	(*GPUComputePartitionSetRequest)(nil),  // 41: amdgpu.GPUComputePartitionSetRequest
	(*GPUComputePartitionSetResponse)(nil), // 42: amdgpu.GPUComputePartitionSetResponse
	(*GPUComputePartitionGetRequest)(nil),  // 43: amdgpu.GPUComputePartitionGetRequest
	(*GPUComputePartition)(nil),            // 44: amdgpu.GPUComputePartition
	(*GPUComputePartitionGetResponse)(nil), // 45: amdgpu.GPUComputePartitionGetResponse
	(*GPUMemoryPartitionSetRequest)(nil),   // 46: amdgpu.GPUMemoryPartitionSetRequest
	(*GPUMemoryPartitionSetResponse)(nil),  // 47: amdgpu.GPUMemoryPartitionSetResponse
	(*GPUMemoryPartitionGetRequest)(nil),   // 48: amdgpu.GPUMemoryPartitionGetRequest
	(*GPUMemoryPartition)(nil),             // 49: amdgpu.GPUMemoryPartition
	(*GPUMemoryPartitionGetResponse)(nil),  // 50: amdgpu.GPUMemoryPartitionGetResponse
	(ApiStatus)(0),                         // 51: types.ApiStatus
	(ErrorCode)(0),                         // 52: types.ErrorCode
}
var file_gpu_proto_depIdxs = []int32{
	1,  // 0: amdgpu.GPUClockFrequencyRange.ClockType:type_name -> amdgpu.GPUClockType
	0,  // 1: amdgpu.GPUSpec.AdminState:type_name -> amdgpu.GPUAdminState
	2,  // 2: amdgpu.GPUSpec.PerformanceLevel:type_name -> amdgpu.GPUPerformanceLevel
	11, // 3: amdgpu.GPUSpec.ClockFrequency:type_name -> amdgpu.GPUClockFrequencyRange
	12, // 4: amdgpu.GPUSpec.RASSpec:type_name -> amdgpu.GPURASSpec
	3,  // 5: amdgpu.GPUSpec.ComputePartitionType:type_name -> amdgpu.GPUComputePartitionType
	4,  // 6: amdgpu.GPUSpec.MemoryPartitionType:type_name -> amdgpu.GPUMemoryPartitionType
	6,  // 7: amdgpu.GPUXGMIStatus.ErrorStatus:type_name -> amdgpu.GPUXGMIErrorStatus
	1,  // 8: amdgpu.GPUClockStatus.Type:type_name -> amdgpu.GPUClockType
	7,  // 9: amdgpu.GPUPCIeStatus.SlotType:type_name -> amdgpu.PCIeSlotType
	8,  // 10: amdgpu.GPUVRAMStatus.Type:type_name -> amdgpu.VRAMType
	10, // 11: amdgpu.GPUBadPageRecord.PageStatus:type_name -> amdgpu.GPUPageStatus
	51, // 12: amdgpu.GPUBadPageGetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 13: amdgpu.GPUBadPageGetResponse.ErrorCode:type_name -> types.ErrorCode
	21, // 14: amdgpu.GPUBadPageGetResponse.Record:type_name -> amdgpu.GPUBadPageRecord
	5,  // 15: amdgpu.GPUStatus.OperStatus:type_name -> amdgpu.GPUOperStatus
	18, // 16: amdgpu.GPUStatus.FirmwareVersion:type_name -> amdgpu.GPUFirmwareVersion
	15, // 17: amdgpu.GPUStatus.ClockStatus:type_name -> amdgpu.GPUClockStatus
	17, // 18: amdgpu.GPUStatus.RASStatus:type_name -> amdgpu.GPURASStatus
	14, // 19: amdgpu.GPUStatus.XGMIStatus:type_name -> amdgpu.GPUXGMIStatus
	20, // 20: amdgpu.GPUStatus.VRAMStatus:type_name -> amdgpu.GPUVRAMStatus
	19, // 21: amdgpu.GPUStatus.PCIeStatus:type_name -> amdgpu.GPUPCIeStatus
	9,  // 22: amdgpu.GPUStatus.ThrottlingStatus:type_name -> amdgpu.GPUThrottlingStatus
	25, // 23: amdgpu.GPUStats.Temperature:type_name -> amdgpu.GPUTemperatureStats
	26, // 24: amdgpu.GPUStats.Usage:type_name -> amdgpu.GPUUsage
	29, // 25: amdgpu.GPUStats.Voltage:type_name -> amdgpu.GPUVoltage
	28, // 26: amdgpu.GPUStats.PCIeStats:type_name -> amdgpu.GPUPCIeStats
	30, // 27: amdgpu.GPUStats.VRAMUsage:type_name -> amdgpu.GPUVRAMUsage
	31, // 28: amdgpu.GPUStats.XGMILinkStats:type_name -> amdgpu.GPUXGMILinkStats
	32, // 29: amdgpu.GPUStats.ViolationStats:type_name -> amdgpu.GPUViolationStats
	13, // 30: amdgpu.GPU.Spec:type_name -> amdgpu.GPUSpec
	24, // 31: amdgpu.GPU.Status:type_name -> amdgpu.GPUStatus
	33, // 32: amdgpu.GPU.Stats:type_name -> amdgpu.GPUStats
	51, // 33: amdgpu.GPUGetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 34: amdgpu.GPUGetResponse.ErrorCode:type_name -> types.ErrorCode
	34, // 35: amdgpu.GPUGetResponse.Response:type_name -> amdgpu.GPU
	13, // 36: amdgpu.GPUUpdateRequest.Spec:type_name -> amdgpu.GPUSpec
	51, // 37: amdgpu.GPUUpdateResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 38: amdgpu.GPUUpdateResponse.ErrorCode:type_name -> types.ErrorCode
	51, // 39: amdgpu.GPUResetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 40: amdgpu.GPUResetResponse.ErrorCode:type_name -> types.ErrorCode
	3,  // 41: amdgpu.GPUComputePartitionSetRequest.PartitionType:type_name -> amdgpu.GPUComputePartitionType
	51, // 42: amdgpu.GPUComputePartitionSetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 43: amdgpu.GPUComputePartitionSetResponse.ErrorCode:type_name -> types.ErrorCode
	3,  // 44: amdgpu.GPUComputePartition.PartitionType:type_name -> amdgpu.GPUComputePartitionType
	51, // 45: amdgpu.GPUComputePartitionGetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 46: amdgpu.GPUComputePartitionGetResponse.ErrorCode:type_name -> types.ErrorCode
	44, // 47: amdgpu.GPUComputePartitionGetResponse.Response:type_name -> amdgpu.GPUComputePartition
	4,  // 48: amdgpu.GPUMemoryPartitionSetRequest.PartitionType:type_name -> amdgpu.GPUMemoryPartitionType
	51, // 49: amdgpu.GPUMemoryPartitionSetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 50: amdgpu.GPUMemoryPartitionSetResponse.ErrorCode:type_name -> types.ErrorCode
	4,  // 51: amdgpu.GPUMemoryPartition.PartitionType:type_name -> amdgpu.GPUMemoryPartitionType
	51, // 52: amdgpu.GPUMemoryPartitionGetResponse.ApiStatus:type_name -> types.ApiStatus
	52, // 53: amdgpu.GPUMemoryPartitionGetResponse.ErrorCode:type_name -> types.ErrorCode
	49, // 54: amdgpu.GPUMemoryPartitionGetResponse.Response:type_name -> amdgpu.GPUMemoryPartition
	35, // 55: amdgpu.GPUSvc.GPUGet:input_type -> amdgpu.GPUGetRequest
	37, // 56: amdgpu.GPUSvc.GPUUpdate:input_type -> amdgpu.GPUUpdateRequest
	41, // 57: amdgpu.GPUSvc.GPUComputePartitionSet:input_type -> amdgpu.GPUComputePartitionSetRequest
	43, // 58: amdgpu.GPUSvc.GPUComputePartitionGet:input_type -> amdgpu.GPUComputePartitionGetRequest
	46, // 59: amdgpu.GPUSvc.GPUMemoryPartitionSet:input_type -> amdgpu.GPUMemoryPartitionSetRequest
	48, // 60: amdgpu.GPUSvc.GPUMemoryPartitionGet:input_type -> amdgpu.GPUMemoryPartitionGetRequest
	39, // 61: amdgpu.GPUSvc.GPUReset:input_type -> amdgpu.GPUResetRequest
	22, // 62: amdgpu.DebugGPUSvc.GPUBadPageGet:input_type -> amdgpu.GPUBadPageGetRequest
	36, // 63: amdgpu.GPUSvc.GPUGet:output_type -> amdgpu.GPUGetResponse
	38, // 64: amdgpu.GPUSvc.GPUUpdate:output_type -> amdgpu.GPUUpdateResponse
	42, // 65: amdgpu.GPUSvc.GPUComputePartitionSet:output_type -> amdgpu.GPUComputePartitionSetResponse
	45, // 66: amdgpu.GPUSvc.GPUComputePartitionGet:output_type -> amdgpu.GPUComputePartitionGetResponse
	47, // 67: amdgpu.GPUSvc.GPUMemoryPartitionSet:output_type -> amdgpu.GPUMemoryPartitionSetResponse
	50, // 68: amdgpu.GPUSvc.GPUMemoryPartitionGet:output_type -> amdgpu.GPUMemoryPartitionGetResponse
	40, // 69: amdgpu.GPUSvc.GPUReset:output_type -> amdgpu.GPUResetResponse
	23, // 70: amdgpu.DebugGPUSvc.GPUBadPageGet:output_type -> amdgpu.GPUBadPageGetResponse
	63, // [63:71] is the sub-list for method output_type
	55, // [55:63] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_gpu_proto_init() }
func file_gpu_proto_init() {
	if File_gpu_proto != nil {
		return
	}
	file_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gpu_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GPUClockFrequencyRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GPURASSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GPUSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GPUXGMIStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GPUClockStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GPUVoltageCurvePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GPURASStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GPUFirmwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GPUPCIeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GPUVRAMStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GPUBadPageRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GPUBadPageGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GPUBadPageGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GPUStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GPUTemperatureStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GPUUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GPUPCIeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GPUVoltage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GPUVRAMUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GPUXGMILinkStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GPUViolationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GPUStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GPUGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GPUGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GPUUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GPUUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GPUResetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GPUResetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GPUComputePartitionSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*GPUComputePartitionSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GPUComputePartitionGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GPUComputePartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GPUComputePartitionGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryPartitionSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryPartitionSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryPartitionGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gpu_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GPUMemoryPartitionGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gpu_proto_msgTypes[28].OneofWrappers = []any{
		(*GPUResetRequest_ResetClocks)(nil),
		(*GPUResetRequest_ResetFans)(nil),
		(*GPUResetRequest_ResetPowerProfile)(nil),
		(*GPUResetRequest_ResetPowerOverDrive)(nil),
		(*GPUResetRequest_ResetXGMIError)(nil),
		(*GPUResetRequest_ResetPerfDeterminism)(nil),
		(*GPUResetRequest_ResetComputePartition)(nil),
		(*GPUResetRequest_ResetNPSMode)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gpu_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gpu_proto_goTypes,
		DependencyIndexes: file_gpu_proto_depIdxs,
		EnumInfos:         file_gpu_proto_enumTypes,
		MessageInfos:      file_gpu_proto_msgTypes,
	}.Build()
	File_gpu_proto = out.File
	file_gpu_proto_rawDesc = nil
	file_gpu_proto_goTypes = nil
	file_gpu_proto_depIdxs = nil
}
